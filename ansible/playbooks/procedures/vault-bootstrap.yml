- hosts: local:consul_servers

  tasks:

  - include_vars: ../../roles/vault/defaults/main.yml
  - include_vars: ../../group_vars/all

  - name: Check if Vault has been bootstrapped
    stat: path=/etc/vault-bootstrapped
    register: vault_bootstrapped

  - fail:
      msg: >
        "Vault has already been bootstrapped. Please email support@teamwire.eu if you require support on this."
    when: vault_bootstrapped.stat.exists

  - name: Initiate Vault
    command: vault operator init -key-shares=6 -key-threshold=2 -format=json
    register: vault_info
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
  
  - name: Extract Vault unseal keys and root token
    run_once: True
    set_fact:
      vault_keys: "{{ (vault_info.stdout|from_json)['unseal_keys_b64'] }}"
      vault_token: "{{ (vault_info.stdout|from_json)['root_token'] }}"

  - name: Create Vault credentials file
    template:
      src: ../../roles/vault/templates/credentials.j2
      dest: /home/teamwire/vault-credentials
    run_once: True

  - name: Set temporary VAULT_TOKEN environment variable
    shell: export VAULT_TOKEN="{{ vault_token }}"

  - name: Unseal Vault
    command: vault operator unseal "{{ item }}"
    with_items:
      - "{{ vault_keys[0] }}"
      - "{{ vault_keys[1] }}"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Authorise root user for Vault login
    copy:
      content: "{{ vault_token }}"
      dest: /root/.vault-token
      mode: 0400
      owner: root
      group: root

  - name: Authorise teamwire user for Vault login
    copy:
      content: "{{ vault_token }}"
      dest: /home/teamwire/.vault-token
      mode: 0400
      owner: teamwire
      group: teamwire

  - name: Enable audit logging
    command: vault audit enable file file_path=/var/log/vault_audit.log
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    run_once: true

  - name: Enable Vault autocomplete
    command: vault -autocomplete-install
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    become: teamwire

  #Enable TLS

  - name: Enable PKI backend
    command: vault secrets enable pki
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Set max global SSL lease to 25 years
    command: vault secrets tune -max-lease-ttl=219000h pki
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Generate Root CA certificate
    command: vault write pki/root/generate/internal common_name="Vault Root CA" ttl=219000h
    register: root_ca
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Create certificate revocation list
    command: vault write pki/config/urls issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Create role for issuing certificates
    command: vault write pki/roles/tls allow_any_name=true allowed_domains=localhost allow_subdomains=true allow_ip_sans="true" max_ttl=26280h
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Issue a TLS certificate for Vault to use
    command: vault write pki/issue/tls common_name="127.0.0.1" alt_names="localhost,*.node.dc1.consul,*.vault.service.dc1.consul,vault.service.consul" ip_sans="127.0.0.1" --format=json
    run_once: True
    register: issue_info
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Set certificate fact
    run_once: True
    set_fact:
      vault_certificate: "{{ issue_info.stdout | from_json }}"

  - name: Install Vault root CA, tls certificate and private key
    copy: content={{ item.content }} dest={{ item.dest }}
    with_items:
      - { content: '{{ vault_certificate.data.issuing_ca }}', dest: '/usr/local/share/ca-certificates/vault-rootCA.crt' }
      - { content: '{{ vault_certificate.data.certificate }}', dest: '/var/lib/vault/ssl/vault.crt' }
      - { content: '{{ vault_certificate.data.private_key }}', dest: '/var/lib/vault/ssl/vault.pem' }
    become: yes

  - name: Trust the Vault Root CA
    command: update-ca-certificates

  - name: Add Vault Environment variables
    lineinfile:
      dest: /etc/environment
      regexp: "^{{ item.property }}="
      line: "{{ item.property }}={{ item.value }}"
    with_items:
      - { property: 'VAULT_ADDR', value: '{{ "https://vault.service.consul:8200" if ansible_play_hosts | length() != 1 else "https://127.0.0.1:8200" }}' }
      - { property: 'VAULT_TOKEN', value: '{{ vault_token }}' }
      - { property: 'VAULT_CACERT', value: '/etc/ssl/certs/ca-certificates.crt' }

  - name: Set bootstrap flag
    file: path=/etc/vault-bootstrapped state=touch

  - name: Confirm bootstrap flag existence
    stat: path=/etc/vault-bootstrapped
    register: vault_bootstrapped

  - name: Enable SSL in Vault configuration
    template: src=../../roles/vault/templates/vault.hcl.j2 dest=/etc/vault/vault.hcl

  - name: Restart Vault so that it uses TLS
    service:
      name: vault
      state: restarted

  - name: Unseal Vault
    command: vault operator unseal "{{ item }}"
    with_items:
      - "{{ vault_keys[0] }}"
      - "{{ vault_keys[1] }}"

  - name: Write and migrate secrets
    command: vault write secret/"{{ item.secret }}" value="{{ item.value }}"
    no_log: True
    with_items:
      - { secret: 'dockerhub/password', value: "{{ dockerhub_password | default('') }}" }
      - { secret: 'keys/gcm', value: "{{ gcm_api_key | default('') }}" }
      - { secret: 'database/password', value: "{{ teamwire_db_password | default('') }}" }
      - { secret: 'database/aes_key', value: "{{ aes_key | default('') }}" }
      - { secret: 'dbserver/mysql_root_password', value: "{{ mysql_root_password | default('') }}" }
      - { secret: 'dbserver/clustercheck_password', value: "{{ clustercheck_password | default('') }}" }
      - { secret: 'dbserver/xtrabackup_password', value: "{{ xtrabackup_password | default('') }}" }
      - { secret: 'redis/password', value: "{{ redis_pass | default('') }}" }
      - { secret: 'smtp/password', value: "{{ smtp_smartpass | default('') }}" }
      - { secret: 'monitoring/db_password', value: "{{ monitoring_db_password | default('') }}" }
      - { secret: 'monitoring/db_web_password', value: "{{ monitoring_db_web_password | default('') }}" }
      - { secret: 'monitoring/icinga_admin_password', value: "{{ icinga_admin_password | default('') }}" }
      - { secret: 'monitoring/icinga_salt', value: "{{ icinga_salt | default('') }}" }
      - { secret: 'monitoring/icinga_api_password', value: "{{ icinga_api_password | default('') }}" }
    run_once: true

  - name: Backup the all file
    copy:
      src: "../../group_vars/all"
      dest: "../../all.backup.{{ ansible_date_time.date }}"
    run_once: true

  - name: Update group_vars/all file
    lineinfile:
      path: "{{ inventory_dir }}/group_vars/all"
      regexp: "{{ item + ':.*$' }}"
      state: absent
    with_items:
      - dockerhub_password
      - gcm_api_key
      - teamwire_db_password
      - aes_key
      - mysql_root_password
      - clustercheck_password
      - xtrabackup_password
      - redis_pass
      - smtp_smartpass
      - monitoring_db_password
      - monitoring_db_web_password
      - icinga_admin_password
      - icinga_salt
      - icinga_api_password
    delegate_to: localhost
    vars:
      ansible_become: no

  - debug: msg="Vault has now been bootstrapped, the Vault credentials have been stored at /home/teamwire/vault-credentials. The all file has been updated to use Vault, a backup has been placed in the group_vars directory."
    run_once: true
