---
# Create the backend storage directories
- file: path=/data owner=daemon mode=0750 state=directory
- apt: pkg=nfs-common state=present
  when: external_storage_path is defined
- mount: name=/data fstype=nfs src="{{ external_storage_path }}" state=mounted
  when: external_storage_path is defined

# Create the backend storage directories
- file: path=/data/{{ item }} owner=daemon mode=0750 state=directory
  when: config_done is defined
  with_items:
    - assets
    - website-screenshot-cache
    - certs
    - certs/apns
    - beat

- name: Install the APNS certificate
  when: config_done is defined
  copy: src="{{ apns_certificate }}" dest=/data/certs/apns/aps-production.pem mode=0640 group=daemon

- name: Install the LDAP CA certificate
  when: ldap_tls_cacert_file is defined
  copy: src="{{ ldap_tls_cacert_file }}" dest=/data/certs/ldap/{{ ldap_tls_cacert_file | basename }} mode=0640 group=daemon

- name: Retrieve and run the Teamwire backend main container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_backend
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    ports: "8080:8080"
    volumes: "/data/assets:/assets,/data/certs/ldap:/app/certs/ldap"
    env:
      AESKEY: "{{aes_key}}"
      ORG_DEFAULT_ALLOW_USER_REG: "{{allow_unknown_users|default('true')}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      EMAIL_HOST: "{{ '172.17.0.1' if fake_email_confirmation is not defined else '' }}"
      BLOB_DIR: /assets
      DEFAULT_FROM_EMAIL: "{{sender_address}}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      FAKE_PIN: "{{ fake_pin|default() }}"
      FAKE_SMS: "{{ fake_sms|default() }}"
      FAKE_EMAIL_CONFIRMATION: "{{ fake_email_confirmation|default() }}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"
      LDAP_URI: "{{ ldap_uri | default() }}"
      LDAP_SCHEMA: "{{ ldap_schema | default() }}"
      LDAP_BINDDN: "{{ ldap_binddn | default() }}"
      LDAP_BINDPW: "{{ ldap_bindpw | default() }}"
      LDAP_BASEDN: "{{ ldap_basedn | default() }}"
      LDAP_USERS_BASEDN: "{{ ldap_users_basedn | default() }}"
      LDAP_GROUPS_BASEDN: "{{ ldap_group_basedn | default() }}"
      LDAP_TLS_CACERT_VERIFY: "{{ ldap_tls_cacert_verify | default() }}"
      LDAP_TLS_CACERT_FILE: "{{ '/app/certs/ldap/%s' % (ldap_tls_cacert_file | basename) if ldap_tls_cacert_file is defined else '' }}"
      LDAP_USERREG_REQ_LDAPUSER: "{{ ldap_userreg_req_ldapuser | default() }}"
      LDAP_USERREG_REQ_LDAPGROUPS: "{{ ldap_userreg_req_ldapgroups | default() }}"

- name: Run the Teamwire backend worker container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_worker
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    volumes: "/data/assets:/assets,/data/certs/apns/:/app/certs/apns/"
    env:
      MODE: worker
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      NOTIFICATION_SERVER_URL: "http://172.17.0.1:9081"
      BLOBDIR: /assets
      APNS_CERT_1: "/app/certs/apns/aps-production.pem,push_production,{{ apns_appid|default('com.teamwire.messenger') }}"
      GCM_API_KEY: "{{ gcm_api_key }}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire beat container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_beat
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    volumes: "/data/beat:/beat"
    env:
      MODE: beat
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      CELERY_BEAT_SCHEDULE: /beat/celerybeat-schedule
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Retrieve and run the Teamwire notification server container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_notification_server
    image: "teamwire/notification-server:prod"
    state: running
    net: bridge
    ports: "9080:9080,9081:9081"
    env:
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"

- name: Retrieve and run the Teamwire backend web screenshot container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_screenshot_server
    image: "teamwire/web-screenshot-server:prod"
    state: running
    net: bridge
    ports: "8081:8080"
    volumes: "/data/website-screenshot-cache:/website-screenshot-cache"
    env:
      CACHE_DIR: /website-screenshot-cache
      HTTP_PROXY: "{{ http_proxy|default() }}"

- name: Install the backend container upstart configuration
  when: config_done is defined
  template: src=docker-upstart.conf.j2 dest="/etc/init/teamwire_{{ item }}.conf"
  with_items:
   - backend
   - worker
   - beat
   - notification_server
   - screenshot_server

  # Install and configure the nginx frontend proxy server
  # Copy the SSL certificate
- copy: src={{ ssl_certfile }} dest=/etc/ssl/private/teamwire-backend.crt mode=0640
  when: ssl_certfile is defined

- copy: src={{ ssl_keyfile }} dest=/etc/ssl/private/teamwire-backend.key mode=0640
  when: ssl_keyfile is defined

# Generate a new Diffie-Hellman group
- command: /usr/bin/openssl dhparam -out /etc/ssl/private/dhparams.pem 2048
  when: ssl_certfile is defined and ssl_keyfile is defined
  args:
    creates: /etc/ssl/private/dhparams.pem

- name: Install nginx
  apt: name=nginx-light state=present

- template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify: reload nginx
- template: src=teamwire-backend-http.j2 dest=/etc/nginx/sites-available/teamwire-backend-http
- template: src=teamwire-backend-https.j2 dest=/etc/nginx/sites-available/teamwire-backend-https

- name: Disable nginx default site
  file:
    dest: /etc/nginx/sites-enabled/default
    state: absent
  notify: reload nginx

- name: Enable HTTP
  when: ssl_certfile is not defined and ssl_keyfile is not defined
  file:
    src: /etc/nginx/sites-available/teamwire-backend-http
    dest: /etc/nginx/sites-enabled/teamwire-backend-http
    state: link
  notify: reload nginx

- name: Disable HTTP
  when: ssl_certfile is defined and ssl_keyfile is defined
  file:
    path: /etc/nginx/sites-enabled/teamwire-backend-http
    state: absent
  notify: reload nginx

- name: Enable HTTPS
  when: ssl_certfile is defined and ssl_keyfile is defined
  file:
    src: /etc/nginx/sites-available/teamwire-backend-https
    dest: /etc/nginx/sites-enabled/teamwire-backend-https
    state: link
  notify: reload nginx

# open firewall ports for the web server
- ufw: rule=allow port=80 proto=tcp
  when: config_done is defined and ssl_certfile is not defined and ssl_keyfile is not defined
- ufw: rule=allow port=80 proto=tcp delete=yes
  when: ssl_certfile is defined and ssl_keyfile is defined
- ufw: rule=allow port=443 proto=tcp
  when: ssl_certfile is defined and ssl_keyfile is defined
