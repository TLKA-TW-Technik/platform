---
# Create the backend storage directories
- file: path=/data owner=daemon mode=0750 state=directory
- file: path=/data/assets owner=daemon mode=0750 state=directory
- file: path=/data/website-screenshot-cache owner=daemon mode=0750 state=directory
- file: path=/data/certs owner=root group=daemon mode=0750 state=directory
- file: path=/data/certs/apns owner=root group=daemon mode=0750 state=directory
- file: path=/data/beat owner=daemon mode=0750 state=directory

- name: Install the APNS certificate
  when: config_done is defined
  copy: src="{{ apns_certificate }}" dest=/data/certs/apns/aps-production.pem mode=0640 group=daemon

# Install docker and the backend container and run it
- apt_key: id=58118E89F3A912897C070ADBF76221572C52609D keyserver=hkp://p80.pool.sks-keyservers.net:80 state=present
  when: http_proxy is not defined
- command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --keyserver-options http-proxy="{{http_proxy}}" --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
  when: http_proxy is defined
- apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present
- apt: pkg=docker-engine state=present
- apt: pkg=python-pip state=present
- pip: name=docker-py version=1.0.0
- user: name=teamwire groups=docker append=yes

- name: Configure proxy for docker
  when: http_proxy is defined
  lineinfile: dest=/etc/default/docker regexp=http_proxy line='export http_proxy="{{http_proxy}}"'
  notify: restart docker

- name: Log in on Docker Hub
  command: docker login -e "{{ dockerhub_email }}" -u "{{ dockerhub_username }}" -p "{{ dockerhub_password }}"
  become: True
  become_user: teamwire
  when: config_done is defined
  args:
    creates: /home/teamwire/.docker/config.json

# Make sure docker is restarted before the containers are set up, otherwise
# the restart would kill the running containers.
- meta: flush_handlers

- name: Retrieve and run the Teamwire backend main container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_backend
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    ports: "8080:8080"
    volumes: "/data/assets:/assets"
    env:
      AESKEY: "{{aes_key}}"
      ORG_DEFAULT_ALLOW_USER_REG: "{{allow_unknown_users|default('true')}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "172.17.0.1:6379:1"
      EMAIL_HOST: 172.17.0.1
      BLOB_DIR: /assets
      DEFAULT_FROM_EMAIL: "{{sender_address}}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      FAKE_PIN: "{{ fake_pin|default() }}"
      FAKE_SMS: "{{ fake_sms|default() }}"
      FAKE_EMAIL_CONFIRMATION: "{{ fake_email_confirmation|default() }}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire backend worker container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_worker
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    volumes: "/data/assets:/assets,/data/certs/apns/:/app/certs/apns/"
    env:
      MODE: worker
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "172.17.0.1:6379:1"
      BLOBDIR: /assets
      APNS_CERT_1: "/app/certs/apns/aps-production.pem,push_production,{{ apns_appid|default('com.teamwire.messenger') }}"
      GCM_API_KEY: "{{ gcm_api_key }}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire beat container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_beat
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    volumes: "/data/beat:/beat"
    env:
      MODE: beat
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "172.17.0.1:6379:1"
      CELERY_BEAT_SCHEDULE: /beat/celerybeat-schedule
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire backend web screenshot container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_screenshot_server
    image: "teamwire/web-screenshot-server:prod"
    state: running
    net: bridge
    ports: "8081:8080"
    volumes: "/data/website-screenshot-cache:/website-screenshot-cache"
    env:
      CACHE_DIR: /website-screenshot-cache
      HTTP_PROXY: "{{ http_proxy|default() }}"

- name: Install the backend container upstart configuration
  when: config_done is defined
  template: src=docker-upstart.conf.j2 dest="/etc/init/teamwire_{{ item }}.conf"
  with_items:
   - backend
   - worker
   - beat
   - screenshot_server

  # Install and configure the nginx frontend proxy server
  # Copy the SSL certificate
- copy: src={{ ssl_certfile }} dest=/etc/ssl/private/teamwire-backend.crt mode=0640
  when: ssl_certfile is defined

- copy: src={{ ssl_keyfile }} dest=/etc/ssl/private/teamwire-backend.key mode=0640
  when: ssl_keyfile is defined

# Generate a new Diffie-Hellman group
- command: /usr/bin/openssl dhparam -out /etc/ssl/private/dhparams.pem 2048
  when: ssl_certfile is defined and ssl_keyfile is defined
  args:
    creates: /etc/ssl/private/dhparams.pem

- name: Install nginx
  apt: name=nginx-light state=present

- template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify: reload nginx
- template: src=teamwire-backend-http.j2 dest=/etc/nginx/sites-available/teamwire-backend-http
- template: src=teamwire-backend-https.j2 dest=/etc/nginx/sites-available/teamwire-backend-https

- name: Disable nginx default site
  file:
    dest: /etc/nginx/sites-enabled/default
    state: absent
  notify: reload nginx

- name: Enable HTTP
  when: ssl_certfile is not defined and ssl_keyfile is not defined
  file:
    src: /etc/nginx/sites-available/teamwire-backend-http
    dest: /etc/nginx/sites-enabled/teamwire-backend-http
    state: link
  notify: reload nginx

- name: Disable HTTP
  when: ssl_certfile is defined and ssl_keyfile is defined
  file:
    path: /etc/nginx/sites-enabled/teamwire-backend-http
    state: absent
  notify: reload nginx

- name: Enable HTTPS
  when: ssl_certfile is defined and ssl_keyfile is defined
  file:
    src: /etc/nginx/sites-available/teamwire-backend-https
    dest: /etc/nginx/sites-enabled/teamwire-backend-https
    state: link
  notify: reload nginx

# open firewall ports for the web server
- ufw: rule=allow port=80 proto=tcp
  when: config_done is defined and ssl_certfile is not defined and ssl_keyfile is not defined
- ufw: rule=allow port=80 proto=tcp delete=yes
  when: ssl_certfile is defined and ssl_keyfile is defined
- ufw: rule=allow port=443 proto=tcp
  when: ssl_certfile is defined and ssl_keyfile is defined
