---
- name: Install the container helper tool
  copy: src=teamwire_container_tool dest=/usr/local/bin/teamwire_container_tool mode=0755 owner=root group=root

- name: Retrieve and run the Teamwire backend main container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_backend
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    ports: "8080:8080"
    volumes: "/data/archiving:/archiving,/data/assets:/assets"
    env:
      AESKEY: "{{aes_key}}"
      ARCHIVING_CONFIG: "/archiving/archiving.yaml"
      ARCHIVING_GPGHOME: "/archiving/gpg"
      ORG_DEFAULT_ALLOW_USER_REG: "{{allow_unknown_users|default('true')}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      EMAIL_HOST: "{{ '172.17.0.1' if fake_email_confirmation is not defined else '' }}"
      BLOB_DIR: /assets
      DEFAULT_FROM_EMAIL: "{{sender_address}}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      FAKE_PIN: "{{ fake_pin|default() }}"
      FAKE_SMS: "{{ fake_sms|default() }}"
      FAKE_EMAIL_CONFIRMATION: "{{ fake_email_confirmation|default() }}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire backend worker container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_worker
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    volumes: "/data/assets:/assets,/data/certs/apns/:/app/certs/apns/"
    env:
      MODE: worker
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      NOTIFICATION_SERVER_URL: "http://172.17.0.1:9081"
      BLOBDIR: /assets
      APNS_CERT_1: "/app/certs/apns/aps-production.pem,push_production,{{ apns_appid|default('com.teamwire.messenger') }}"
      GCM_API_KEY: "{{ gcm_api_key }}"
      WNS_CLIENT_ID:  "{{ wns_client_id|default() }}"
      WNS_CLIENT_SECRET:  "{{ wns_client_secret|default() }}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire beat container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_beat
    image: "teamwire/backend:prod"
    state: running
    net: bridge
    volumes: "/data/beat:/beat"
    env:
      MODE: beat
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{mysql_host|default('172.17.0.1')}}"
      MYSQL_PORT: "{{mysql_port|default('3306')}}"
      MYSQL_PASSWORD: "{{teamwire_db_password}}"
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      CELERY_BEAT_SCHEDULE: /beat/celerybeat-schedule
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Retrieve and run the Teamwire notification server container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_notification_server
    image: "teamwire/notification-server:prod"
    state: running
    net: bridge
    ports: "9080:9080,9081:9081"
    env:
      REDIS_URI: "{{ redis_host|default('172.17.0.1') }}:{{ redis_port|default('6379') }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"

- name: Retrieve and run the Teamwire backend web screenshot container
  when: config_done is defined
  docker:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

    name: teamwire_screenshot_server
    image: "teamwire/web-screenshot-server:prod"
    state: running
    net: bridge
    ports: "8081:8080"
    volumes: "/data/website-screenshot-cache:/website-screenshot-cache"
    env:
      CACHE_DIR: /website-screenshot-cache
      HTTP_PROXY: "{{ http_proxy|default() }}"

- name: Install the backend container upstart configuration
  when: config_done is defined
  template: src=docker-upstart.conf.j2 dest="/etc/init/teamwire_{{ item }}.conf"
  with_items:
   - backend
   - worker
   - beat
   - notification_server
   - screenshot_server
