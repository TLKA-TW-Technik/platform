#!/bin/bash

IMAGES="teamwire/backend teamwire/web-screenshot-server teamwire/notification-server"
CONTAINERS="teamwire_screenshot_server teamwire_notification_server teamwire_beat teamwire_worker teamwire_backend"
DOCKER_VERSION=$(docker --version | awk '{ gsub(",",""); print $3}')

# The following function was written by Dennis Williamson (https://stackoverflow.com/users/26428)
# and posted on http://stackoverflow.com/questions/4023830 (licensed cc-by-sa)
vercomp () {
	if [[ $1 == $2 ]]
	then
		return 0
	fi
	local IFS=.
	local i ver1=($1) ver2=($2)
	# fill empty fields in ver1 with zeros
	for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
	do
		ver1[i]=0
	done
	for ((i=0; i<${#ver1[@]}; i++))
	do
		if [[ -z ${ver2[i]} ]]
		then
			# fill empty fields in ver2 with zeros
			ver2[i]=0
		fi
		if ((10#${ver1[i]} > 10#${ver2[i]}))
		then
			return 1
		fi
		if ((10#${ver1[i]} < 10#${ver2[i]}))
		then
			return 2
		fi
	done
	return 0
}

help() {
	echo "Command line options:"
	echo
	echo "--help      Show help"
	echo "--migrate   Run database migrations"
	echo "--pull TAG  Pull containers for a given tag"
	echo "--rm        Remove all stopped Teamwire containers"
	echo "--stop      Stop all running Teamwire containers"
	echo "--start     Start all stopped Teamwire containers"
	echo "--tag TAG   Use given tag for production"
}

pull_images() {
	echo "Pulling Teamwire container images for version $TAG"
	echo
	for IMAGE in $IMAGES; do
		docker pull "$IMAGE":"$TAG"
	done
}

remove_containers() {
	for CONTAINER in $CONTAINERS; do
		docker rm "$CONTAINER"
	done
}

run_migrations() {
	CONFIG_FILE=~teamwire/platform/ansible/group_vars/all
	MYSQL_HOST="$(awk '/^mysql_host/ { print $2 }' "$CONFIG_FILE")"                      2> /dev/null
	MYSQL_PORT="$(awk '/^mysql_port/ { print $2 }' "$CONFIG_FILE")"                      2> /dev/null
	MYSQL_PASS="$(awk '/^teamwire_db_password/ { print $2 }' "$CONFIG_FILE")"            2> /dev/null
	AESKEY="$(awk '/aes_key:/ { print $2 }' "$CONFIG_FILE" | sed 's|^\"\(.*\)\"$|\1|' )" 2> /dev/null

	if [ -z "$MYSQL_HOST" ]; then
		MYSQL_HOST=$(ifconfig docker0 | awk -F'[ :]+' '/inet addr/{print $4}')
	fi

	if [ -z "$MYSQL_PORT" ]; then
		MYSQL_PORT=3306
	fi

	if [ -z "$MYSQL_PASS" ] || [ -z "$AESKEY" ] ; then
		echo "Cannot read required parameters from $CONFIG_FILE."
		echo "Please ensure the file exists and the database is configured."
		exit 1
	fi

	ERROR_LOG="$(tempfile)"

	echo "Running database migrations"
	echo
	docker run --rm -e MODE=migration -e MYSQL_HOST="$MYSQL_HOST" \
		-e MYSQL_PORT="$MYSQL_PORT" -e MYSQL_PASSWORD="$MYSQL_PASS" \
		-e AESKEY="$AESKEY" teamwire/backend:prod 2> "$ERROR_LOG" | egrep -v '^(.+)='

	if [ $? -gt 0 ] ; then
		cat "$ERROR_LOG"
	fi
	rm -f "$ERROR_LOG"
}

tag_images() {
	echo "Using $TAG as production version"

	# Use -f vor Docker versions < 1.10.0 (See https://github.com/docker/docker/pull/18350)
	vercomp "$DOCKER_VERSION" "1.10.0"
	if [ $? -eq 2 ] ; then
		PARAM="-f"
	else
		PARAM=""
	fi

	for IMAGE in $IMAGES; do
		docker tag $PARAM "$IMAGE":"$TAG" "$IMAGE":prod
	done
}

stop_containers() {
	for CONTAINER in $CONTAINERS; do
		if docker ps -qf name="$CONTAINER" | egrep -q '^.+$' ; then
			docker stop "$CONTAINER"
		fi
	done
}

start_containers() {
	for CONTAINER in $CONTAINERS; do
		docker start "$CONTAINER"
	done
}

TAG=""
TASK=""
while [ $# -gt 0 ] ; do
	case "$1" in
		-h|--help)
			help
			exit
			;;
		-m|--migrate)
			TASK="run_migrations"
			;;
		-p|--pull)
			TASK="pull_images"
			TAG_REQUIRED=yes
			;;
		-r|--rm)
			TASK="remove_containers"
			;;
		--start)
			TASK="start_containers"
			;;
		-s|--stop)
			TASK="stop_containers"
			;;
		-t|--tag)
			TASK="tag_images"
			TAG_REQUIRED=yes
			;;
		*)
			TAG="$1"
			;;
	esac
	shift
done

if [ -z "$TASK" ] ; then
	echo "Mission operation"
	echo
	help
	exit 1
fi

if [ "$TAG_REQUIRED" = "yes" ] && [ -z "$TAG" ] ; then
	echo "Please specify a release tag!"
	echo
	help
	exit 1
fi

$TASK
