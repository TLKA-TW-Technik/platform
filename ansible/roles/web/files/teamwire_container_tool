#!/bin/sh

IMAGES="teamwire/backend teamwire/web-screenshot-server teamwire/notification-server"
CONTAINERS="teamwire_screenshot_server teamwire_notification_server teamwire_beat teamwire_worker teamwire_backend"

help() {
	echo "Command line options:"
	echo
	echo "--help      Show help"
	echo "--pull TAG  Pull containers for a given tag"
	echo "--rm        Remove all stopped Teamwire containers"
	echo "--stop      Stop all running Teamwire containers"
	echo "--start     Start all stopped Teamwire containers"
	echo "--tag TAG   Use given tag for production"
}

pull_images() {
	echo "Pulling Teamwire container images for version $TAG"
	echo
	for IMAGE in $IMAGES; do
		docker pull "$IMAGE":"$TAG"
	done
}

remove_containers() {
	for CONTAINER in $CONTAINERS; do
		docker rm "$CONTAINER"
	done
}

tag_images() {
	echo "Using $TAG as production version"
	for IMAGE in $IMAGES; do
		docker tag -f "$IMAGE":"$TAG" "$IMAGE":prod
	done
}

stop_containers() {
	for CONTAINER in $CONTAINERS; do
		# First check if the container was started by upstart
		if sudo initctl status "$CONTAINER" | grep -q 'running' ; then
			sudo initctl stop "$CONTAINER"
		elif docker ps -qf name="$CONTAINER" | egrep -q '^.+$' ; then
			docker stop "$CONTAINER"
		fi
	done
}

start_containers() {
	for CONTAINER in $CONTAINERS; do
		sudo initctl start "$CONTAINER"
	done
}

TAG=""
TASK=""
while [ $# -gt 0 ] ; do
	case "$1" in
		-h|--help)
			help
			exit
			;;
		-p|--pull)
			TASK="pull_images"
			TAG_REQUIRED=yes
			;;
		-r|--rm)
			TASK="remove_containers"
			;;
		--start)
			TASK="start_containers"
			;;
		-s|--stop)
			TASK="stop_containers"
			;;
		-t|--tag)
			TASK="tag_images"
			TAG_REQUIRED=yes
			;;
		*)
			TAG="$1"
			;;
	esac
	shift
done

if [ -z "$TASK" ] ; then
	echo "Mission operation"
	echo
	help
	exit 1
fi

if [ "$TAG_REQUIRED" = "yes" ] && [ -z "$TAG" ] ; then
	echo "Please specify a release tag!"
	echo
	help
	exit 1
fi

$TASK
