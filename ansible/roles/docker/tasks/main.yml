---
# Install and configure docker
- name: Check if the Docker repository signing key needs to be installed
  shell: bash -c "gpg --keyring /etc/apt/trusted.gpg -k 2C52609D > /dev/null 2>&1 && echo present || echo absent"
  register: docker_repo_key

- name: Add the Docker repository signing key (direct connection)
  apt_key: id=58118E89F3A912897C070ADBF76221572C52609D keyserver=hkp://p80.pool.sks-keyservers.net:80 state=present
  when: docker_repo_key.stdout == "absent" and http_proxy is not defined

- name: Add the Docker repository signing key (via proxy server)
  command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --keyserver-options http-proxy=\"{{http_proxy}}\" --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
  when: docker_repo_key.stdout == "absent" and http_proxy is defined

- name: Ensure apt-transport-https is installed
  apt: pkg=apt-transport-https state=present

- name: Add the Docker repository
  apt_repository: repo='deb https://apt.dockerproject.org/repo {{ansible_distribution|lower}}-{{ansible_distribution_release}} main' state=present

- name: Install Docker
  apt: pkg=docker-engine state=present

- name: Install pip (Ubuntu)
  apt: pkg=python-pip state=present
  when: ansible_distribution == "Ubuntu"

- name: Install docker-py 1.0 (Ubuntu)
  pip: name=docker-py version=1.0.0
  when: ansible_distribution == "Ubuntu"

- name: Install python-docker (Debian)
  apt: pkg=python-docker default_release=jessie-backports state=present
  when: ansible_distribution == "Debian"

- name: Add user 'teamwire' to the docker group
  user: name=teamwire groups=docker append=yes

- name: Create systemd drop-in directory for docker (Debian)
  file: name=/etc/systemd/system/docker.service.d state=directory
  when: ansible_distribution == "Debian"

- name: Configure proxy for docker (Ubuntu)
  when: http_proxy is defined and ansible_distribution == "Ubuntu"
  lineinfile: dest=/etc/default/docker regexp=http_proxy line='export http_proxy="{{http_proxy}}"'
  notify: restart docker

- name: Disable proxy for docker when no proxy is configured (Ubuntu)
  when: http_proxy is not defined and ansible_distribution == "Ubuntu"
  lineinfile: dest=/etc/default/docker regexp=http_proxy line='# export http_proxy=""'
  notify: restart docker

- name: Configure proxy for docker (Debian)
  when: http_proxy is defined and ansible_distribution == "Debian" and (not 'docker_registry' in groups or inventory_hostname == groups['docker_registry'] | first)
  template: src=http-proxy.conf.j2 dest=/etc/systemd/system/docker.service.d/http-proxy.conf
  notify:
    - reload systemd
    - restart docker

- name: Disable proxy for docker when no proxy is configured (Debian)
  when: http_proxy is not defined and ansible_distribution == "Debian"
  file: name=/etc/systemd/system/docker.service.d/http-proxy.conf state=absent
  notify:
    - reload systemd
    - restart docker

- name: Configure Docker daemon parameters (Debian)
  when: ansible_distribution == "Debian"
  template: src=docker.conf.j2 dest=/etc/systemd/system/docker.service.d/docker.conf
  notify:
    - reload systemd
    - restart docker

- name: Start Docker after mounting NFS shares (Debian)
  when: ansible_distribution == "Debian"
  copy: src=wait_for_nfs.conf dest=/etc/systemd/system/docker.service.d/wait_for_nfs.conf
  notify: reload systemd

# Make sure docker is restarted before the containers are set up, otherwise
# the restart would kill the running containers. We need to restart before the
# following step, otherwise the login would fail when a proxy is configured.
- meta: flush_handlers

- name: Check if installing offline
  stat: path=/etc/offline_installation
  register: offline_mode

- name: Log in on Docker Hub (Ubuntu)
  command: docker login -e "{{ dockerhub_email }}" -u "{{ dockerhub_username }}" -p "{{ dockerhub_password }}"
  become: True
  become_user: teamwire
  when: config_done is defined and ansible_distribution == "Ubuntu" and not offline_mode.stat.exists
  args:
    creates: /home/teamwire/.docker/config.json

# Requires docker-py >= 1.7, hence can only be used on Debian
- name: Log in on Docker Hub (Debian)
  when: config_done is defined and ansible_distribution == "Debian" and 'docker_registry' not in groups and not offline_mode.stat.exists
  docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

- name: Configure firewall to allow Docker containers access to the host
  ufw: rule=allow interface=docker0 direction=in

- name: Run registrator in clustered setups
  when: private_ip is defined and 'consul_servers' in groups
  docker:
    name: registrator
    image: "gliderlabs/registrator:latest"
    state: reloaded
    restart_policy: always
    net: host
    volumes: "/var/run/docker.sock:/tmp/docker.sock"
    command: "-ip {{ private_ip | ipaddr('address') }} consul://localhost:8500"
