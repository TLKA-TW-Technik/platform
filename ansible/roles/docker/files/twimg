#!/usr/bin/python

from __future__ import print_function
import argparse
import csv
import os.path
import sys
import tarfile
from docker import Client


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class TWImg():
    def __init__(self, registry):
        self.registry = registry
        self.cli = Client(base_url='unix://var/run/docker.sock')

    def _remoteNameFor(self, repo):
        return "{}/{}".format(self.registry, repo)

    def getUntaggedImages(self):
        images = self.cli.images()

        localImages = {}

        for image in images:
            localTags = []
            remoteTags = []
            for tag in image['RepoTags']:
                if tag.startswith(self.registry):
                    remoteTags.append(tag)
                else:
                    localTags.append(tag)

            for tag in localTags:
                if self._remoteNameFor(tag) not in remoteTags:
                    id = image['Id'].split(':')[1]
                    if id not in localImages:
                        localImages[id] = [tag]
                    else:
                        localImages[id].append(tag)

        return localImages

    def pushImagesToRegistry(self, images):
        for ID, repos_and_tags in images.items():
            for repo_and_tag in repos_and_tags:
                print("Tagging %s - %s" % (ID, repo_and_tag))
                repo, tag = repo_and_tag.split(':')

                if self.cli.tag(ID, self._remoteNameFor(repo), tag):
                    self.cli.push(self._remoteNameFor(repo), tag)
                else:
                    eprint("Failed to tag {}".format(repo_and_tag))
                    return 1

    def importImagesFromTarfile(self, filename):
        if not os.path.isfile(filename):
            eprint("Cannot find %s." % filename)
            return 1

        if not tarfile.is_tarfile(filename):
            eprint("Cannot read %s. Is it a valid archive?" % filename)
            return 1

        print("Importing images from %s:\n" % filename)
        archive = tarfile.open(filename)

        images = {}

        indexFile = archive.extractfile("index.txt")
        indexReader = csv.reader(indexFile, delimiter=';')
        for row in indexReader:
            if len(row) != 3:
                continue

            images[row[0]] = {'repository': row[1], 'tag': row[2]}

        indexFile.close()

        for image, attributes in images.items():
            print("%s:%s"  % (attributes['repository'], attributes['tag']))
            imageFile = archive.extractfile(image)

            self.cli.import_image_from_data(
                imageFile.read(),
                attributes['repository'],
                attributes['tag']
            )

            imageFile.close()

    def actionImport(self, args):
        return self.importImagesFromTarfile(args.archive)

    def actionPush(self, args):
        untaggedImages = self.getUntaggedImages()
        return self.pushImagesToRegistry(untaggedImages)

    def performAction(self, action, args):
        methodName = "action%s" % action.capitalize()
        method = getattr(self, methodName)
        return method(args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""Work with Docker images and a local registry"""
    )

    parser.add_argument(
        "--registry",
        dest='registry',
        type=str,
        required=True,
        help='The Docker registry to use'
    )

    parser.add_argument(
        "--archive",
        dest='archive',
        type=str,
        help='The Docker image export file to import'
    )

    parser.add_argument(
        "action",
        type=str,
        choices=['push', 'import'],
        help="Action to perform."
    )

    args = parser.parse_args()
    twimg = TWImg(args.registry)
    exit(twimg.performAction(args.action, args))
