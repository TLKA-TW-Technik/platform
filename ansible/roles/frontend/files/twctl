#!/bin/bash

IMAGES="teamwire/backend teamwire/web-screenshot-server teamwire/notification-server"
CONTAINERS="teamwire_screenshot_server teamwire_notification_server teamwire_beat teamwire_worker teamwire_backend"
ANSIBLE_DIR=~teamwire/platform/ansible
CONFIG_FILE="${ANSIBLE_DIR}/group_vars/all"

check_tag() {
	local TAG=$1
	for IMAGE in $IMAGES ; do
		if ! docker images "$IMAGE" | grep -q "$TAG" ; then
			# Required image not found for given tag
			echo "ERROR: Containers for the requested tag could not be found."
			echo "       Please pull the containers first using the pull action."
			exit 1
		fi
	done
}

check_config_file() {
	if [ ! -f "$CONFIG_FILE" ]; then
		echo "ERROR: Missing configuration file ${CONFIG_FILE}!"
		echo "       Please configure the server before using this tool."
		exit 1
	fi
}

get_mysql_configuration() {
	MYSQL_HOST="$(awk '/^mysql_host/ { print $2 }' "$CONFIG_FILE")"                      2> /dev/null
	MYSQL_PORT="$(awk '/^mysql_port/ { print $2 }' "$CONFIG_FILE")"                      2> /dev/null
	MYSQL_PASS="$(awk '/^teamwire_db_password/ { print $2 }' "$CONFIG_FILE")"            2> /dev/null
	AESKEY="$(awk '/aes_key:/ { print $2 }' "$CONFIG_FILE" | sed 's|^\"\(.*\)\"$|\1|' )" 2> /dev/null

	if [ -z "$MYSQL_HOST" ]; then
		MYSQL_HOST=$(/sbin/ifconfig docker0 | awk -F'[ :]+' '/inet addr/{print $4}')
	fi

	if [ -z "$MYSQL_PORT" ]; then
		MYSQL_PORT=3306
	fi

	if [ -z "$MYSQL_PASS" ] || [ -z "$AESKEY" ] ; then
		echo "ERROR: Cannot read required parameters from $CONFIG_FILE."
		echo "       Please ensure the file exists and the database is configured."
		exit 1
	fi
}

save_container_logs() {
	local LOGDIR=/var/log/teamwire
	local CONTAINER

	if [ ! -d "$LOGDIR" ] ; then
		sudo mkdir "$LOGDIR"
	fi

	for CONTAINER in $CONTAINERS ; do
		local DATE_CREATED
		local LOG_FILE

		DATE_CREATED=$(docker inspect -f "{{ .Created }}" "$CONTAINER")
		LOG_FILE=$(docker inspect -f "{{ .LogPath }}" "$CONTAINER")
		local OUT_FILE="$LOGDIR/$CONTAINER-$DATE_CREATED.log"
		sudo cp "$LOG_FILE" "$OUT_FILE"
		sudo chgrp docker "$OUT_FILE"
		sudo gzip -f "$OUT_FILE" &
	done
}

help() {
	echo "Command line options:"
	echo
	echo "--help      Show help"
	echo "--tag TAG   Specifiy tag for actions that require a tag"
	echo "--file NAME Specify a filename for actions that require it"
	echo
	echo "Actions:"
	echo
	echo "pull        Pull containers for a given tag (requires tag)"
	echo "migrate     Run database migrations (requires tag)"
	echo "setup       Configure and run Teamwire containers (requires tag)"
	echo "start       Start all stopped Teamwire containers"
	echo "stop        Stop all running Teamwire containers"
	echo "rm          Remove all stopped Teamwire containers"
	echo "backupdb    Create a backup of the database (requires file name)"
}

backupdb() {
	get_mysql_configuration
	local MYSQLDUMP_CONFIG_FILE

	if [ -f "$FILENAME" ] ; then
		echo "$FILENAME exists, please specify a name that doesn't exists!"
		exit 1
	fi

	MYSQLDUMP_CONFIG_FILE=$(mktemp)
	chmod 0600 "$MYSQLDUMP_CONFIG_FILE"
	echo -e "[mysqldump]\nuser=teamwire\npassword=$MYSQL_PASS" > "$MYSQLDUMP_CONFIG_FILE"

	mysqldump --defaults-file="$MYSQLDUMP_CONFIG_FILE" \
		-h "$MYSQL_HOST" -P "$MYSQL_PORT" \
		-u teamwire teamwire > "$FILENAME"

	rm -f "$MYSQLDUMP_CONFIG_FILE"
}

pull_images() {
	echo "Pulling Teamwire container images for version $TAG"
	echo
	for IMAGE in $IMAGES; do
		docker pull "$IMAGE":"$TAG"
	done
}

remove_containers() {
	# Save the logs of the containers before deleting them
	save_container_logs

	for CONTAINER in $CONTAINERS; do
		docker rm "$CONTAINER"
	done
}

run_migrations() {
	check_tag "$TAG"
	check_config_file
	get_mysql_configuration

	ERROR_LOG="$(tempfile)"

	echo "Running database migrations"
	echo
	docker run --rm -e MODE=migration -e MYSQL_HOST="$MYSQL_HOST" \
		-e MYSQL_PORT="$MYSQL_PORT" -e MYSQL_PASSWORD="$MYSQL_PASS" \
		-e AESKEY="$AESKEY" teamwire/backend:"$TAG" 2> "$ERROR_LOG" | egrep -v '^(.+)='

	if [ $? -gt 0 ] ; then
		cat "$ERROR_LOG"
	fi
	rm -f "$ERROR_LOG"
}

stop_containers() {
	for CONTAINER in $CONTAINERS; do
		if docker ps -qf name="$CONTAINER" | egrep -q '^.+$' ; then
			docker stop "$CONTAINER"
		fi
	done
}

start_containers() {
	for CONTAINER in $CONTAINERS; do
		docker start "$CONTAINER"
	done
}

setup_containers() {
	check_tag "$TAG"
	check_config_file

	if ! grep -q '^version' "$CONFIG_FILE" ; then
		echo "ERROR: Please update the configuration file ${CONFIG_FILE}"
		echo "       from the provided example before using this action. "
		exit 1
	fi

	# Save the logs of the running containers
	save_container_logs

	# Write given tag into config file
	sed -i -e 's/^\(version: \).*$/\1'"$TAG"'/' $CONFIG_FILE

	ansible-playbook -i "${ANSIBLE_DIR}/hosts" "${ANSIBLE_DIR}/playbooks/roles/container.yml"
}

TAG=""
TASK=""
while [ $# -gt 0 ] ; do
	case "$1" in
		-h|--help)
			help
			exit
			;;
		-t|--tag)
			TAG=$2
			shift
			;;
		-f|--file)
			FILENAME=$2
			shift
			;;
		pull)
			TASK="pull_images"
			TAG_REQUIRED=yes
			;;
		migrate)
			TASK="run_migrations"
			TAG_REQUIRED=yes
			;;
		setup)
			TASK="setup_containers"
			TAG_REQUIRED=yes
			;;
		start)
			TASK="start_containers"
			;;
		stop)
			TASK="stop_containers"
			;;
		rm)
			TASK="remove_containers"
			;;
		backupdb)
			TASK="backupdb"
			FILENAME_REQUIRED=yes
			;;
		exportlogs)
			TASK="save_container_logs"
	esac
	shift
done

if [ -z "$TASK" ] ; then
	echo "ERROR: Mission action"
	echo
	help
	exit 1
fi

if [ "$TAG_REQUIRED" = "yes" ] && [ -z "$TAG" ] ; then
	echo "ERROR: Please specify a release tag!"
	echo
	help
	exit 1
fi

if [ "$FILENAME_REQUIRED" = "yes" ] && [ -z "$FILENAME" ] ; then
	echo "ERROR: Please specify a file name!"
	echo
	help
	exit 1
fi

$TASK
