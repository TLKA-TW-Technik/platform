---
- include_tasks: remove_nginx.yml

- name: Install HAproxy
  apt:
     name: haproxy
     state: present

- name: Configure HAproxy Single-Server
  template:
     src: haproxy.cfg.j2
     dest: "/etc/haproxy/haproxy.cfg"
     mode: 0640
     owner: haproxy
     group: haproxy
  notify: reload haproxy
  when: "'frontend_servers' not in groups and groups['all'] | length() == 1"

- name: Generate the SSL certificate
  template:
    src: haproxy_oldstyle_certificate.j2
    dest: /etc/ssl/certs/server_and_intermediate_and_root.crt
    mode: 0640
  when: ssl_certfile is defined
  notify: reload haproxy

- name: Create the SSL certificate chain
  template:
    src:  server_and_intermediate_and_root.crt.j2
    dest: /etc/ssl/certs/server_and_intermediate_and_root.crt
    mode: 0640
  when: ssl_server_certificate is defined and ssl_intermediate_certificate is defined and ssl_root_certificate is defined
  notify: reload haproxy

- name: Create the SSL intermediate and root certificate file
  template:
    src:  intermediate_and_root.crt.j2
    dest: /etc/ssl/certs/intermediate_and_root.crt
    mode: 0640
  when: ssl_intermediate_certificate is defined and ssl_root_certificate is defined
  notify: reload haproxy

- name: Copy the SSL key
  copy:
    src: "{{ ssl_keyfile }}"
    dest: /etc/ssl/private/teamwire-backend.key
    mode: 0640
  when: ssl_keyfile is defined
  notify: reload haproxy

- name: Copy teamwire intermediate
  copy:
    src: "{{ ssl_intermediate_certificate }}"
    dest: "/etc/ssl/certs/teamwire.intermediate.crt"
    mode: 0640
  when: ssl_intermediate_certificate is defined

- name: Copy teamwire certificate
  copy:
    src: "{{ ssl_server_certificate }}"
    dest: "/etc/ssl/certs/teamwire.server.crt"
    mode: 0640
  when: ssl_server_certificate is defined

- name: Ensure socat is installed
  apt:
    name: socat
    state: present

- name: Copy ocsp.sh to src dir
  copy:
     src: ocsp.sh
     dest: "/usr/local/src/"
     mode: 0750
     owner: root
     group: root
  when: ssl_server_certificate is defined and ssl_intermediate_certificate is defined and ssl_root_certificate is defined

- name: stat ocsp file and register it
  stat:
    path: "{{ ocspfile_path }}"
  register: stat_ocspfile

- name: Create HAP ocsp file if not exists
  command: /usr/local/src/ocsp.sh DONT UPDATE HAP RUNTIME CONF
  notify: restart haproxy
  when:
    - stat_ocspfile.stat.exists == False
    - ssl_server_certificate is defined and ssl_intermediate_certificate is defined and ssl_root_certificate is defined

- name: Add OCSP daily cron job
  cron:
     name: "daily ocsp job to create ocsp file"
     special_time: daily
     job: "/usr/local/src/ocsp.sh > /dev/null"
  when: ssl_server_certificate is defined and ssl_intermediate_certificate is defined and ssl_root_certificate is defined

- name: Generate a new Diffie-Hellman group
  command: /usr/bin/openssl dhparam -out /etc/ssl/private/dhparams.pem 2048
  when: ssl_keyfile is defined
  args:
    creates: /etc/ssl/private/dhparams.pem

- name: Import SSL certificate check
  import_tasks: ssl-check.yml

# open firewall ports for the web server
- ufw: rule=allow port=80 proto=tcp
  when: config_done is defined

- ufw: rule=allow port=443 proto=tcp
  when: ssl_keyfile is defined

- name: Re-use sockets in TIME_WAIT state for new connections
  sysctl:
    name: net.ipv4.tcp_tw_reuse
    value: 1
    state: present

- name: Ensure netfilter can handle a sufficient amount of connections
  sysctl:
    name: net.nf_conntrack_max
    value: 65536
    state: present

- name: Increase number of socket connection backlog
  sysctl:
    name: net.core.somaxconn
    value: 1024
    state: present
    reload: yes

- include_tasks: cluster.yml
  when: "'frontend_servers' in groups"
