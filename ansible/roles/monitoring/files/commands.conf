/* Command objects */

object NotificationCommand "mail-host-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICEDESC = "$service.name$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}

/* basically the same check as supplied, only the mindless defaults removed */
object CheckCommand "dns-no-defaults" {
  import "plugin-check-command"
  import "ipv4-or-ipv6"

  command = [ PluginDir + "/check_dns" ]

  arguments = {
    "-H" = {
      value = "$dns_lookup$"
      description = "The name or address you want to query."
    }
    "-s" = {
      value = "$dns_server$"
      description = "Optional DNS server you want to use for the lookup."
    }
    "-a" = {
      value = "$dns_expected_answers$"
      description = "Optional ip address or host you expect the DNS server to return. Host must end with a dot (.). This option can be repeated multiple times (Returns OK if any value match). If multiple addresses are returned at once, you have to match the whole string of addresses separated with commas (sorted alphabetically)."
    }
    "-a_old" = {
      key = "-a"
      value ="$dns_expected_answer$"
    }
    "-A" = {
      set_if = "$dns_authoritative$"
    }
    "-w" = {
      value = "$dns_wtime$"
      description = "Return warning if elapsed time exceeds value."
    }
    "-c" = {
      value = "$dns_ctime$"
      description = "Return critical if elapsed time exceeds value."
    }
    "-t" = {
      value = "$dns_timeout$"
      description = "Seconds before connection times out. Defaults to 10."
    }
  }

  vars.dns_timeout = 10
}

object CheckCommand "redis-simple" {
  import "plugin-check-command"
  import "ipv4-or-ipv6"

  command = [ PluginDir + "/check_redis.py" ]

  arguments = {
    "-s" = {
      value = "$redis_server$"
      description = "Redis server to connect to."
    }
    "-p" = {
      value = "$redis_port$"
      description = "Redis port to connect to."
    }
    "-a" = {
      value = "$redis_password$"
      description = "Authentication string."
    }
    "-w" = {
      value = "$redis_wmem$"
      required = true
      description = "Memory utilization (in MB) that triggers a warning status."
    }
    "-c" = {
      value = "$redis_cmem$"
      required = true
      description = "Memory utilization (in MB) that triggers a critical status."
    }
    "-t" = {
      value = "$redis_timeout$"
      description = "Number of milliesconds to wait before timing out and considering redis down"
    }
  }

  vars.redis_server = "$check_address$"
  vars.redis_port = 6379
}

object CheckCommand "memory" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_mem.pl" ]

    arguments = {
      "-w" = {
         value = "$mem_warning$"
      }
     "-c" = {
        value ="$mem_critical$"
      }
     "-u" = {
        set_if = "$mem_used$"
     }
     "-C" = {
        set_if = "$mem_cache$"
     }
   }
}

object CheckCommand "haproxy" {
    import "plugin-check-command"
    command = [ "sudo", PluginDir + "/check_haproxy" ]

    arguments = {
        "--defaults" = {
            value = "$haproxy_default$"
            description = "Set/Override the defaults which will be applied to all checks (unless specifically set by --overrides)."
        }
        "--frontends" = {
            set_if = "$haproxy_frontends$"
            description = "Enable checks for the frontends in HAProxy (that they're marked as OPEN and the session limits haven't been reached)."
        }
        "--nofrontends" = {
            set_if = "$haproxy_nofrontends$"
            description = "Disable checks for the frontends in HAProxy (that they're marked as OPEN and the session limits haven't been reached)."
        }
        "--backends" = {
            set_if = "$haproxy_backends$"
            description = "Enable checks for the backends in HAProxy (that they have the required quorum of servers, and that the session limits haven't been reached)."
        }
        "--nobackends" = {
            set_if = "$haproxy_nobackends$"
            description = "Disable checks for the backends in HAProxy (that they have the required quorum of servers, and that the session limits haven't been reached)."
        }
        "--servers" = {
            set_if = "$haproxy_servers$"
            description = "Enable checks for the servers in HAProxy (that they haven't reached the limits for the sessions or for queues)."
        }
        "--noservers" = {
            set_if = "$haproxy_noservers$"
            description = "Disable checks for the servers in HAProxy (that they haven't reached the limits for the sessions or for queues)."
        }
        "--overrides" = {
            value = "$haproxy_overrides$"
            description = "Override the defaults for a particular frontend or backend, in the form {name}:{override}, where {override} is the same format as --defaults above."
        }
        "--socket" = {
            value = "$haproxy_socket$"
            description = "Path to the socket check_haproxy should connect to"
            required = true
        }
    }
}

object CheckCommand "ssl_cert" {
	import "plugin-check-command"

	command = [ "sudo", PluginDir + "/check_ssl_cert" ]

	arguments = {
		"-H" = {
			value = "$ssl_cert_address$"
			description = "The host's address"
			required = true
		}
		"-p" = {
			value = "$ssl_cert_port$"
			description = "TCP port number (default: 443)"
		}
		"-f" = {
			value = "$ssl_cert_file$"
			description = "Local file path (works with -H localhost only)"
		}
		"-w" = {
			value = "$ssl_cert_warn$"
			description = "Minimum number of days a certificate has to be valid"
		}
		"-c" = {
			value = "$ssl_cert_critical$"
			description = "Minimum number of days a certificate has to be valid to issue a critical status"
		}
		"-n" = {
			value = "$ssl_cert_cn$"
			description = "Pattern to match the CN of the certificate"
		}
		"--altnames" = {
			set_if = "$ssl_cert_altnames$"
			description = "Matches the pattern specified in -n with alternate"
		}
		"-i" = {
			value = "$ssl_cert_issuer$"
			description = "Pattern to match the issuer of the certificate"
		}
		"-o" = {
			value = "$ssl_cert_org$"
			description = "Pattern to match the organization of the certificate"
		}
		"-e" = {
			value = "$ssl_cert_email$"
			description = "Pattern to match the email address contained in the certificate"
		}
		"-N" = {
			set_if = "$ssl_cert_match_host$"
			description = "Match CN with the host name"
		}
		"--serial" = {
			value = "$ssl_cert_serial$"
			description = "Pattern to match the serial number"
		}
		"-A" = {
			set_if = "$ssl_cert_noauth$"
			description = "Ignore authority warnings (expiration only)"
		}
		"-s" = {
			set_if = "$ssl_cert_selfsigned$"
			description = "Allow self-signed certificate"
		}
		"--sni" = {
			value = "$ssl_cert_sni$"
			description = "Sets the TLS SNI (Server Name Indication) extension"
		}
		"-t" = {
			value = "$ssl_cert_timeout$"
			description = "Seconds before connection times out (default: 15)"
		}
		"-P" = {
			value = "$ssl_cert_protocol$"
			description = "Use the specific protocol {http|smtp|pop3|imap|ftp|xmpp|irc|ldap} (default: http)"
		}
		"-C" = {
			value = "$ssl_cert_clientssl_cert$"
			description = "Use client certificate to authenticate"
		}
		"--clientpass" = {
			value = "$ssl_cert_clientpass$"
			description = "Set passphrase for client certificate"
		}
		"-L" = {
			value = "$ssl_cert_ssllabs$"
			description = "SSL Labs assestment"
		}
		"--ignore-ssl-labs-cache" = {
			set_if = "$ssl_cert_ssllabs_nocache$"
			description = "Forces a new check by SSL Labs"
		}
		"-r" = {
			value = "$ssl_cert_rootssl_cert$"
			description = "Root certificate or directory to be used for certificate validation"
		}
		"--ssl2" = {
			set_if = {{
				return macro("$ssl_cert_ssl_version$") == "ssl2"
			}}
		}
		"--ssl3" = {
			set_if = {{
				return macro("$ssl_cert_ssl_version$") == "ssl3"
			}}
		}
		"--tls1" = {
			set_if = {{
				return macro("$ssl_cert_ssl_version$") == "tls1"
			}}
		}
		"--tls1_1" = {
			set_if = {{
				return macro("$ssl_cert_ssl_version$") == "tls1_1"
			}}
		}
		"--tls1_2" = {
			set_if = {{
				return macro("$ssl_cert_ssl_version$") == "tls1_2"
			}}
		}
		"--no_ssl2" = {
			set_if = {{
				var disable_versions = macro("$ssl_cert_disable_ssl_versions$")
				if (typeof(disable_versions) == String) {
					disable_versions = [ disable_versions ]
				}
				return "ssl2" in disable_versions
			}}
		}
		"--no_ssl3" = {
			set_if = {{
				var disable_versions = macro("$ssl_cert_disable_ssl_versions$")
				if (typeof(disable_versions) == String) {
					disable_versions = [ disable_versions ]
				}
				return "ssl3" in disable_versions
			}}
		}
		"--no_tls1" = {
			set_if = {{
				var disable_versions = macro("$ssl_cert_disable_ssl_versions$")
				if (typeof(disable_versions) == String) {
					disable_versions = [ disable_versions ]
				}
				return "tls1" in disable_versions
			}}
		}
		"--no_tls1_1" = {
			set_if = {{
				var disable_versions = macro("$ssl_cert_disable_ssl_versions$")
				if (typeof(disable_versions) == String) {
					disable_versions = [ disable_versions ]
				}
				return "tls1_1" in disable_versions
			}}
		}
		"--no_tls1_2" = {
			set_if = {{
				var disable_versions = macro("$ssl_cert_disable_ssl_versions$")
				if (typeof(disable_versions) == String) {
					disable_versions = [ disable_versions ]
				}
				return "tls1_2" in disable_versions
			}}
		}
		"--ecdsa" = {
			set_if = {{
				return macro("$ssl_cert_cipher$") == "ecdsa"
			}}
			description = "Cipher selection: force ECDSA authentication"
		}
		"--rsa" = {
			set_if = {{
				return macro("$ssl_cert_cipher$") == "rsa"
			}}
			description = "Cipher selection: force RSA authentication"
		}
		"--ignore-sig-alg" = {
			set_if = "$ssl_cert_ignore_signature$"
			description = "Do not check if the certificate was signed with SHA1 od MD5"
		}
		"--ignore-exp" = {
			set_if = "$ssl_cert_ignore_expiration$"
			description = "Ignore expiration date"
		}
		"--ignore-ocsp" = {
			set_if = "$ssl_cert_ignore_ocsp$"
			description = "Do not check revocation with OCSP"
		}

	}

	vars.ssl_cert_address = "$check_address$"
	vars.ssl_cert_port = 443
}

object CheckCommand "check_mysql_health" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_mysql_health" ]

    arguments = {
        "--critical" = "$mysql_health_crit$"
        "--database" = "$mysql_health_database$"
        "--hostname" = "$mysql_health_host$"
        "--labelformat" = "$mysql_health_label$"
        "--mode" = "$mysql_health_mode$"
        "--name" = "$mysql_health_name$"
        "--name2" = "$mysql_health_name2$"
        "--password" = "$mysql_health_password$"
        "--port" = "$mysql_health_port$"
        "--regexp" = "$mysql_health_regexp$"
        "--socket" = "$mysql_health_socket$"
        "--units" = "$mysql_health_units$"
        "--username" = "$mysql_health_username$"
        "--warning" = "$mysql_health_warn$"
    }
}

object CheckCommand "check_docker" {
	import "plugin-check-command"

	command = [ "sudo", PluginDir + "/check_docker.py" ]

	arguments = {
		"--connection" = {
			value = "$docker_connection$"
			description = "[/<path to>/docker.socket|<ip/host address>:<port>] Where to find docker daemon socket. (default: /var/run/docker.sock)"
		}
		"--secure-connection" = {
			value = "$docker_secure_connection$"
			description = "[<ip/host address>:<port>] Where to find TLS protected docker daemon socket."
		}
		"--binary_units" = {
			value = "$docker_binary_units$"
			description = "Use a base of 1024 when doing calculations of KB, MB, GB, & TB (This is default)"
		}
		"--decimal_units" = {
			value = "$docker_decimal_units$"
			description = "Use a base of 1000 when doing calculations of KB, MB, GB, & TB"
		}
		"--timeout" = {
			value = "$docker_timeout$"
			description = "Connection timeout in seconds. (default: 10.0)"
		}
		"--containers" = {
			value = "$docker_containers$"
			description = "CONTAINERS ...] One or more RegEx that match the names of the container(s) to check. If omitted all containers are checked. (default: ['all'])"
		}
		"--present" = {
			value = "$docker_present$"
			description = "Modifies --containers so that each RegEx must match at least one container."
		}
		"--threads" = {
			value = "$docker_threads$"
			description = "This + 1 is the maximum number of concurent threads/network connections. (default: 10)"
		}
		"--cpu" = {
			value = "$docker_cpu$"
			description = "Check cpu usage percentage taking into account any limits. Valid values are 0 - 100."
		}
		"--memory" = {
			value = "$docker_memory$"
			description = "Check memory usage taking into account any limits. Valid values for units are %,B,KB,MB,GB."
		}
		"--status" = {
			value = "$docker_status$"
			description = "Desired container status (running, exited, etc)."
		}
		"--health" = {
			value = "$docker_health$"
			description = "Check container's health check status"
		}
		"--uptime" = {
			value = "$docker_uptime$"
			description = "Minimum container uptime in seconds. Use when infrequent crashes are tolerated."
		}
		"--version" = {
			value = "$docker_version$"
			description = "Check if the running images are the same version as those in the registry. Useful for finding stale images. Does not support login."
		}
		"--insecure-registries" = {
			value = "$docker_insecure_reg$"
			description = "INSECURE_REGISTRIES [INSECURE_REGISTRIES] List of registries to connect to with http(no TLS).Useful when using --version with images frominsecure registries"
		}
		"--restarts" = {
			value = "$docker_restarts$"
			description = "Container restart thresholds."
		}
}
}