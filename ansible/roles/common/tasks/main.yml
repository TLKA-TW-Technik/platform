---
- name: Configure proxy for apt
  when: http_proxy is defined
  template: src=apt.proxy.conf.j2 dest=/etc/apt/apt.conf.d/proxy

- name: apt-get update
  apt: update_cache=yes

# do security upgrades
- name: Install unattended-upgrades
  action: apt pkg={{item}} state=present
  with_items:
  - unattended-upgrades
  - update-notifier-common
- name: Make sure unattended-upgrades only installs from $ubuntu_release-security
  lineinfile: dest=/etc/apt/apt.conf.d/50unattended-upgrades regexp="$ubuntu_release-updates" state=absent
- name: Mail root on unattended-upgrades
  lineinfile: dest=/etc/apt/apt.conf.d/50unattended-upgrades regexp=Unattended-Upgrade::Mail line='Unattended-Upgrade::Mail "root";'
- name: Set unattended-upgrade period
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic regexp=APT::Periodic::Unattended-Upgrade line='APT::Periodic::Unattended-Upgrade "1";'
- name: Set apt-get cleanup period
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic regexp=APT::Periodic::AutocleanInterval line='APT::Periodic::AutocleanInterval "7";'
- name: Set apt-get download period
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic regexp=APT::Periodic::Download-Upgradeable-Packages line='APT::Periodic::Download-Upgradeable-Packages "1";'

- name: Automatically remove obsolete packages
  copy: src=apt-autoremove dest=/etc/cron.daily/apt-autoremove mode=0755

- name: Install useful tools
  apt: name={{item}} state=present
  with_items:
  - htop
  - sysstat
  - iotop
  - glances
  - mc
  - zile
  - vim-tiny
  - nano
  - haveged

- name: Remove useless packages
  apt: pkg={{item}} state=absent purge=yes
  with_items:
  - mlocate # sucks IO heavily

# Configure system-wide proxy
- lineinfile: dest=/etc/environment line="http_proxy={{http_proxy}}"
  when: http_proxy is defined
- lineinfile: dest=/etc/environment line="https_proxy={{http_proxy}}"
  when: http_proxy is defined

# Generated by packer, but not desirable
- lineinfile: dest=/etc/hosts regexp="^127.0.1.1\s+teamwire-server" state=absent

- name: Set hostname
  when: config_done is defined or inventory_hostname != "localhost"
  hostname: name="{{ inventory_hostname if inventory_hostname != "localhost" else external_hostname }}"

- name: Add hostname to localhost
  when: config_done is defined
  lineinfile: dest=/etc/hosts regexp="^127\.0\.0\.1\s+localhost" line="127.0.0.1 localhost {{ external_hostname }} {{ inventory_hostname if inventory_hostname != 'localhost' else '' }}"

- name: Add other cluster nodes to /etc/hosts
  lineinfile: dest=/etc/hosts line="{{ hostvars[item]['ansible_eth0']['ipv4']['address'] }}\t{{ item }} "
  with_items: "{{ groups['all'] | default([]) }}"
  when: item != inventory_hostname

# send outgoing mail over smarthost
- name: Install Postfix
  apt: pkg=postfix

- name: Write the Postfix configuration file
  template: src=postfix-main.cf.j2 dest=/etc/postfix/main.cf
  when: config_done is defined
  notify: restart postfix

- name: Write the Postfix password file
  template: src=postfix-passwd.j2 dest=/etc/postfix/sasl/passwd mode=0600
  when: config_done is defined
  notify: rebuild postfix passwd map

- name: Give root a speaking name
  when: config_done is defined
  user: name=root comment="root@{{ external_hostname }}"

# install ntp and set timezone to UTC
- name: Set timezone to UTC
  copy: content="Etc/UTC\n" dest=/etc/timezone
  notify: update timezone
- name: Install the NTP daemon
  apt: pkg=ntp
- name: Enable and start the NTP daemon
  service: name=ntp state=started enabled=true
- name: Write NTP configuration file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify: restart NTP

# general firewall rules
- name: Install the UFW firewall
  apt: pkg=ufw state=present
- name: Allow incoming SSH access
  ufw: rule=allow name=OpenSSH
- name: Configure default firewall policy
  ufw: state=enabled policy=reject

# SSH
- name: Disable SSH password logins
  when: ssh_disable_passwords is defined and ssh_disable_passwords
  action: lineinfile dest=/etc/ssh/sshd_config regexp=^#?PasswordAuthentication line="PasswordAuthentication no"
  notify: reload sshd

- name: Enable SSH password logins
  when: ssh_disable_passwords is not defined or not ssh_disable_passwords
  action: lineinfile dest=/etc/ssh/sshd_config regexp=^#?PasswordAuthentication line="PasswordAuthentication yes"
  notify: reload sshd

- name: Disable DNS lookup on SSH login
  lineinfile: dest=/etc/ssh/sshd_config line="UseDNS no"
  notify: reload sshd

# Keep track of the plattform repository
- name: Install git
  apt: pkg=git state=present

- name: Check out the teamwire/platform git repository
  git: repo=https://github.com/teamwire/platform.git depth=1 dest=/home/teamwire/platform update=no
  notify: fix ownership of git checkout

- stat: path=/home/teamwire/platform/ansible/group_vars/all
  register: config_file

- name: Secure permissions of Ansible configuration file
  file: path=/home/teamwire/platform/ansible/group_vars/all state=file mode=0600 owner=teamwire group=teamwire
  when: config_file.stat.exists

# Prepare tmate usage
# It needs any ssh key for the calling user to function
- name: Create SSH keys for the teamwire user
  user: name=teamwire generate_ssh_key=yes
  when: config_done is defined

# Install tmate
- name: Configure the tmate repository
  apt_repository: repo=ppa:nviennot/tmate
- name: Install tmate
  apt: pkg=tmate
