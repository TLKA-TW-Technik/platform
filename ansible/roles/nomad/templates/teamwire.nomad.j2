job "teamwire" {
	# Specify the datacenters within the region this job can run in.
	datacenters = ["dc1"]

	# Priority controls our access to resources and scheduling priority.
	# This can be 1 to 100, inclusively, and defaults to 50.
	# priority = 50

	constraint {
		attribute = "${attr.kernel.name}"
		value = "linux"
	}

	constraint {
		attribute = "${meta.groups}"
		operator = "regexp"
		value = "backend_servers"
	}

	# Configure the job to do rolling updates
	update {
		# Stagger updates every 10 seconds
		stagger = "10s"

		# Update a single task at a time
		max_parallel = 1
	}

 vault {
    policies = ["nomad-job"]
	change_mode = "noop"
  }

	group "backends" {
		count = {{ groups['backend_servers'] | count }}

		restart {
			interval = "5m"
			attempts = 10
			delay = "25s"
			mode = "delay"
		}
		task "backend" {
			driver = "docker"

			config {
				image = "teamwire/backend:{{ version }}"
{% if not "docker_registry" in groups %}
				auth {
					username = "{{ dockerhub_username }}"
					password = "{{ dockerhub_password }}"
				}
{%endif %}
{% if docker_host_networking is not defined %}
				port_map {
					http = 8080
				}
{% else %}
				network_mode = "host"
{%endif %}
				logging {
					type = "syslog"
					config {
						tag = "teamwire-backend"
						syslog-facility = "local6"
					}
				}
				volumes = [
					"/data/archiving:/archiving",
					"/data/assets:/assets"
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
				port = "http"
				check {
					type = "http"
					path = "/health"
					interval = "15s"
					timeout = "2s"
				}
			}
{% raw %}
			template {
			data = <<EOH
			AESKEY = "{{ with secret "secret/database/aes_key"}}{{.Data.value}}{{end}}"
			MYSQL_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
			ORA_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
			REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				ARCHIVING_CONFIG = "/archiving/archiving.conf"
				ARCHIVING_GPGHOME = "/archiving/gpg"
				ORG_DEFAULT_ALLOW_USER_REG = "{{ allow_unknown_users|default('true') }}"
				ORG_DEFAULT_ALLOW_USER_QUERY = "{{ allow_user_query|default('false') }}"
{% if docker_host_networking is defined and mysql_host is defined %}
				MYSQL_HOST = "127.0.0.1"
{% else %}
				MYSQL_HOST = "{{ mysql_host | default() }}"
{%endif %}
				MYSQL_PORT = "{{ mysql_port | default() }}"
				MYSQL_DATABASE = "{{ teamwire_db_name if mysql_host is defined else '' }}"
				MYSQL_USER = "{{ teamwire_db_user if mysql_host is defined else '' }}"
				ORA_HOST = "{{ oracle_host | default() }}"
				ORA_PORT = "{{ oracle_port | default() }}"
				ORA_DATABASE = "{{ teamwire_db_name if oracle_host is defined else '' }}"
				ORA_USER = "{{ teamwire_db_user if oracle_host is defined else '' }}"
				REDIS_URI = "prod.redis.service.consul:6379:1"
{% if docker_host_networking is defined %}
				EMAIL_HOST = "{{ '127.0.0.1' if fake_email_confirmation is not defined else '' }}"
{% else %}
				EMAIL_HOST = "{{ '172.17.0.1' if fake_email_confirmation is not defined else '' }}"
{%endif %}
				BLOB_DIR = "/assets"
				DEFAULT_FROM_EMAIL = "{{ sender_address }}"
				http_proxy = "{{ http_proxy|default() }}"
				https_proxy = "{{ http_proxy|default() }}"
				VERSION = "{{ version }}"
				FAKE_PIN = "{{ fake_pin|default() }}"
				FAKE_SMS = "{{ fake_sms|default() }}"
				FAKE_EMAIL_CONFIRMATION = "{{ fake_email_confirmation|default() }}"
				FAKE_DB_ENCRYPTION = "{{ fake_db_encryption|default() }}"
{% if docker_host_networking is defined %}
				BIND_HOST = "${NOMAD_IP_http}"
				BIND_PORT = "${NOMAD_PORT_http}"
{%endif %}
			}

			resources {
				cpu = {{ (total_cpu_power|int * backend_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ core_count|int * backend_ram_alloc|int }} # Allocated RAM in MB
				network {
					mbits = 100
					port "http" {}
				}
			}
		}
	}
	group "web-screenshot-servers" {
		count = 1

		restart {
			interval = "5m"
			attempts = 10
			delay = "25s"
			mode = "delay"
		}
		task "web-screenshot-server" {
			driver = "docker"

			config {
				image = "teamwire/web-screenshot-server:{{ version }}"
{% if not "docker_registry" in groups %}
				auth {
					username = "{{ dockerhub_username }}"
					password = "{{ dockerhub_password }}"
				}
{%endif %}
{% if docker_host_networking is not defined %}
				port_map {
					http = 8080
				}
{% else %}
				network_mode = "host"
{%endif %}
				logging {
					type = "syslog"
					config {
						tag = "teamwire-screenshot-server"
						syslog-facility = "local6"
					}
				}
				volumes = [
					"/data/website-screenshot-cache:/website-screenshot-cache"
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
				port = "http"
				check {
					type = "http"
					path = "/health"
					interval = "15s"
					timeout = "2s"
				}
			}

			env {
				CACHE_DIR = "/website-screenshot-cache"
				HTTP_PROXY = "{{ http_proxy|default() }}"
{% if docker_host_networking is defined %}
				BIND_HOST = "${NOMAD_IP_http}"
				BIND_PORT = "${NOMAD_PORT_http}"
{%endif %}
			}

			resources {
				cpu = {{ (total_cpu_power|int * screenshot_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ core_count|int * screenshot_ram_alloc|int }} # Allocated RAM in MB
				network {
					mbits = 100
					port "http" {}
				}
			}
		}
	}

	group "workers" {
		count = {{ groups['backend_servers'] | count }}

		restart {
			interval = "5m"
			attempts = 10
			delay = "25s"
			mode = "delay"
		}

		task "worker" {
			driver = "docker"

			config {
				image = "teamwire/backend:{{ version }}"
{% if not "docker_registry" in groups %}
				auth {
					username = "{{ dockerhub_username }}"
					password = "{{ dockerhub_password }}"
				}
{%endif %}
{% if docker_host_networking is not defined %}
				port_map {
					health = 8080
				}
{% else %}
				network_mode = "host"
{%endif %}
				logging {
					type = "syslog"
					config {
						tag = "teamwire-worker"
						syslog-facility = "local6"
					}
				}
				volumes = [
					"/data/assets:/assets",
					"/data/certs/apns:/app/certs/apns"
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
				port = "health"
				check {
					type = "http"
					path = "/health"
					interval = "15s"
					timeout = "2s"
				}
			}
{% raw %}
			template {
			data = <<EOH
			AESKEY = "{{ with secret "secret/database/aes_key"}}{{.Data.value}}{{end}}"
			MYSQL_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
			ORA_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
			REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
			GCM_API_KEY = "{{ with secret "secret/keys/gcm"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				MODE = "worker"
{% if docker_host_networking is defined and mysql_host is defined %}
				MYSQL_HOST = "127.0.0.1"
{% else %}
				MYSQL_HOST = "{{ mysql_host | default() }}"
{%endif %}
				MYSQL_PORT = "{{ mysql_port | default() }}"
				MYSQL_DATABASE = "{{ teamwire_db_name if mysql_host is defined else '' }}"
				MYSQL_USER = "{{ teamwire_db_user if mysql_host is defined else '' }}"
				ORA_HOST = "{{ oracle_host | default() }}"
				ORA_PORT = "{{ oracle_port | default() }}"
				ORA_DATABASE = "{{ teamwire_db_name if oracle_host is defined else '' }}"
				ORA_USER = "{{ teamwire_db_user if oracle_host is defined else '' }}"
				REDIS_URI = "prod.redis.service.consul:6379:1"
				NOTIFICATION_SERVER_URL = "http://notification-server-9081.service.consul:9081"
				BLOBDIR = "/assets"
				APNS_CERT_1 = "/app/certs/apns/aps-production.pem,push_production,{{ apns_appid | default('com.teamwire.messenger') }}"
{% if apns_certificate_2 is defined %}
				APNS_CERT_2 = "/app/certs/apns/{{ apns_certificate_2 | basename }},push_production,{{ apns_appid_2 }}"
{% endif %}
{% if apns_certificate_3 is defined %}
				APNS_CERT_3 = "/app/certs/apns/{{ apns_certificate_3 | basename }},{{ apns_certificate_type_3 | default('push_production') }},{{ apns_appid_3 }}"
{% endif %}
				http_proxy = "{{ http_proxy|default() }}"
				https_proxy = "{{ http_proxy|default() }}"
				FAKE_DB_ENCRYPTION = "{{ fake_db_encryption|default() }}"
{% if docker_host_networking is defined %}
				BIND_HOST = "${NOMAD_IP_health}"
				BIND_PORT = "${NOMAD_PORT_health}"
{%endif %}
			}

			resources {
				cpu = {{ (total_cpu_power|int * worker_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ core_count|int * worker_ram_alloc|int }} # Allocated RAM in MB
				network {
					mbits = 100
					port "health" {}
				}
			}
		}
	}

	group "beat" {

		task "beat" {
			driver = "docker"

			config {
				image = "teamwire/backend:{{ version }}"
{% if not "docker_registry" in groups %}
				auth {
					username = "{{ dockerhub_username }}"
					password = "{{ dockerhub_password }}"
				}
{%endif %}
{% if docker_host_networking is defined %}
				network_mode = "host"
{%endif %}

				logging {
					type = "syslog"
					config {
						tag = "teamwire-beat"
						syslog-facility = "local6"
					}
				}
				volumes = [
					"/data/beat:/beat"
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
			}
{% raw %}
			template {
			data = <<EOH
			AESKEY = "{{ with secret "secret/database/aes_key"}}{{.Data.value}}{{end}}"
			MYSQL_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
			ORA_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				MODE = "beat"
{% if docker_host_networking is defined and mysql_host is defined %}
				MYSQL_HOST = "127.0.0.1"
{% else %}
				MYSQL_HOST = "{{ mysql_host | default() }}"
{%endif %}
				MYSQL_PORT = "{{ mysql_port | default() }}"
				MYSQL_DATABASE = "{{ teamwire_db_name if mysql_host is defined else '' }}"
				MYSQL_USER = "{{ teamwire_db_user if mysql_host is defined else '' }}"
				ORA_HOST = "{{ oracle_host | default() }}"
				ORA_PORT = "{{ oracle_port | default() }}"
				ORA_DATABASE = "{{ teamwire_db_name if oracle_host is defined else '' }}"
				ORA_USER = "{{ teamwire_db_user if oracle_host is defined else '' }}"
				REDIS_URI = "prod.redis.service.consul:6379:1"
				REDIS_PASSWORD = "{{ redis_pass|default() }}"
				CELERY_BEAT_SCHEDULE = "/beat/celerybeat-schedule"
				FAKE_DB_ENCRYPTION = "{{ fake_db_encryption|default() }}"
			}

			resources {
				cpu = 150 # Allocated CPU in MHz
				memory = 96 # Allocated RAM in MB
				network {
					mbits = 100
				}
			}
		}
	}

	group "notification-server" {

		task "notification-server" {
			driver = "docker"

			config {
				image = "teamwire/notification-server:{{ version }}"
{% if not "docker_registry" in groups %}
				auth {
					username = "{{ dockerhub_username }}"
					password = "{{ dockerhub_password }}"
				}
{%endif %}
				port_map {
					http = 9080
					rest = 9081
				}
				logging {
					type = "syslog"
					config {
						tag = "teamwire-notifications"
						syslog-facility = "local6"
					}
				}
			}

			service {
				name = "${TASK}-9080"
				tags = ["teamwire"]
				port = "http"
				check {
					type = "http"
					path = "/"
					interval = "15s"
					timeout = "2s"
				}
			}
			service {
				name = "${TASK}-9081"
				tags = ["teamwire"]
				port = "rest"
			}
{% raw %}
			template {
			data = <<EOH
			REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				REDIS_URI = "prod.redis.service.consul:6379:1"
				LOGLEVEL = "{{ notification_loglevel|default() }}"
			}

			resources {
				cpu = {{ (total_cpu_power|int * notification_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ [128, core_count|int * notification_ram_alloc|int]|max }} # Allocated RAM in MB
				network {
					mbits = 100
					port "http" {}
					port "rest" {
						static = 9081
					}
				}
			}
		}
	}
}
