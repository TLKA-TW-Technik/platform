- name: Check if Nomad-server policy exists for Vault
  command: vault policy read nomad-server
  ignore_errors: True
  register: policy_check
  run_once: True
  delegate_to: "{{ groups.consul_servers | first }}"

- block:
    - name: Setup the Nomad policy for Vault if it doesn't exist
      copy:
        src: "{{ role_path }}/../vault/files/{{ item }}"
        dest: /root/
      with_items:
        - nomad-server-policy.hcl
        - nomad-job-policy.hcl
        - nomad-cluster-role.json
    - command: vault policy write nomad-server /root/nomad-server-policy.hcl
    - command: vault policy write nomad-job /root/nomad-job-policy.hcl
    - command: vault write /auth/token/roles/nomad-cluster @/root/nomad-cluster-role.json
    - file:
        dest: "/root/{{ item }}"
        state: absent
      with_items:
        - nomad-server-policy.hcl
        - nomad-job-policy.hcl
        - nomad-cluster-role.json
  run_once: true
  when: inventory_hostname == groups['consul_servers'] | first  and (policy_check.stderr is defined and "No policy" in policy_check.stderr)

- name: Check if the Vault config for Nomad exists
  stat: path=/etc/nomad/vault.hcl
  register: vault_config

- name: Create Vault token for Nomad
  command: vault token create -policy nomad-server -period 72h -orphan -format=json
  when: inventory_hostname in groups['consul_servers'] and not vault_config.stat.exists
  register: vault_nomad_token

- name: Set token fact
  set_fact:
    vault_nomad_token: "{{ vault_nomad_token.stdout | from_json }}"
  when: inventory_hostname in groups['consul_servers'] and not vault_config.stat.exists

- name: Fetch Vault SSL certificate, key & CA from a consul server
  fetch:
    src: "{{ item }}"
    dest: "{{ inventory_dir }}/"
    flat: yes
  run_once: true
  with_items:
    - /var/lib/vault/ssl/vault.crt
    - /var/lib/vault/ssl/vault.pem
    - /usr/local/share/ca-certificates/vault-rootCA.crt
  when: inventory_hostname in groups['consul_servers']

- name: Copy the Vault SSL certificate, key & CA to the backend servers
  copy:
    src: "{{ inventory_dir }}/{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: 'vault.crt', dest: '/var/lib/vault/ssl/'}
    - { src: 'vault.pem', dest: '/var/lib/vault/ssl/'}
    - { src: 'vault-rootCA.crt', dest: '/usr/local/share/ca-certificates/'}
  register: vault_certs
  when: inventory_hostname in groups['backend_servers']

- name: Delete the Vault SSL certificate, key & CA from localhost
  file: 
    dest: "{{ inventory_dir }}/{{ item }}"
    state: absent
  run_once: true
  with_items:
    - vault.crt
    - vault.pem
    - vault-rootCA.crt
  delegate_to: localhost
  vars:
    ansible_become: no

- name: Trust the Vault Root CA
  command: update-ca-certificates
  when: inventory_hostname in groups['backend_servers'] and vault_certs.changed

- name: Write Vault configuration for nomad
  template:
    src: "{{ role_path }}/../vault/templates/nomad-vault.hcl.j2"
    dest: /etc/nomad/vault.hcl
  notify: Restart Nomad agent
  when: not vault_config.stat.exists
