#!/bin/bash

# Find Ansible configuration
if [ -d ~/platform/ansible ] ; then
	ANSIBLE_DIR=~/platform/ansible
elif [ -d ~teamwire/platform/ansible ] ; then
	ANSIBLE_DIR=~teamwire/platform/ansible
else
	echo "Cannot find platform directory."
	exit 1
fi

CONFIG_FILE="${ANSIBLE_DIR}/group_vars/all"
CLUSTER_CONFIG_DIR=/data/cluster_config

_get_config_value() {
	if [ ! -f "$CONFIG_FILE" ]; then
		echo "ERROR: Missing configuration file ${CONFIG_FILE}!"
		echo "       Please configure the server before using this tool."
		exit 1
	fi

	local ENTRY="$1"
	awk '/^'${ENTRY}'\y/ { gsub("(^\"|\"$)","", $2); print $2 }' "$CONFIG_FILE" 2> /dev/null
}

if [ -d "$CLUSTER_CONFIG_DIR" ] ; then
	# Clustered setup
	INSTALLATION=cluster

	if [ "$UID" != "0" ] && [ ! -r "$CLUSTER_CONFIG_DIR" ] ; then
		# Try to grant read permissions to the required files
		sudo chgrp -R teamwire "$CLUSTER_CONFIG_DIR"
	fi

	COMPOSE_FILE="${CLUSTER_CONFIG_DIR}/docker-compose.yml"
	DOCKER_COMPOSE="/usr/local/bin/docker-compose -p teamwire -f "$COMPOSE_FILE" -H tcp://localhost:4000"
else
	# Single server installation
	INSTALLATION=single
	CONTAINERS="teamwire_screenshot_server teamwire_notification_server teamwire_beat teamwire_worker teamwire_backend"

	# Check for active/passive server setup
	SERVER_ID="$(_get_config_value server_id)"
	PARTNER_NODE="$(_get_config_value partner_node)"
	REPLICATION_PASSWORD="$(_get_config_value replication_password)"

	if [ -n "$SERVER_ID" ] && [ -n "$PARTNER_NODE" ] && [ -n "$REPLICATION_PASSWORD" ] ; then
		REPLICATED=true
	else
		REPLICATED=false
	fi
fi

IMAGES="teamwire/backend teamwire/web-screenshot-server teamwire/notification-server"

# Temporary user credentials storage for functions accessing MySQL
MYSQL_CONFIG_FILE=""

cleanup() {
	if [ -n "$MYSQL_CONFIG_FILE" ] ; then
		rm -d "$MYSQL_CONFIG_FILE"
	fi
}

trap cleanup EXIT

check_tag() {
	local TAG=$1
	for IMAGE in $IMAGES ; do
		if ! docker images "$IMAGE" | grep -q "$TAG" ; then
			# Required image not found for given tag
			echo "ERROR: Containers for the requested tag could not be found."
			echo "       Please pull the containers first using the pull action."
			exit 1
		fi
	done
}

get_database_configuration() {
	if [ "$INSTALLATION" == "cluster" ] ; then
		. "${CLUSTER_CONFIG_DIR}/cluster.conf"
		return
	fi

	MYSQL_HOST="$(_get_config_value mysql_host)"
	MYSQL_PORT="$(_get_config_value mysql_port)"
	MYSQL_PASS="$(_get_config_value teamwire_db_password)"
	AESKEY="$(_get_config_value aes_key)"

	if [ -z "$MYSQL_HOST" ]; then
		MYSQL_HOST=$(/sbin/ifconfig docker0 | awk -F'[ :]+' '/inet addr/{print $4}')
	fi

	if [ -z "$MYSQL_PORT" ]; then
		MYSQL_PORT=3306
	fi

	if [ -z "$MYSQL_PASS" ] || [ -z "$AESKEY" ] ; then
		echo "ERROR: Cannot read required parameters from $CONFIG_FILE."
		echo "       Please ensure the file exists and the database is configured."
		exit 1
	fi
}

write_temporary_database_access_config() {
	if [ -z "$MYSQL_CONFIG_FILE" ] ; then
		MYSQL_CONFIG_FILE=$(mktemp ~/.twctl_XXXXXXXXXXXX)
		chmod 0600 "$MYSQL_CONFIG_FILE"
		echo -e "[mysqldump]\nuser=teamwire\npassword=$MYSQL_PASS" > "$MYSQL_CONFIG_FILE"
	fi
}

save_container_logs() {
	local LOGDIR=/var/log/teamwire
	local CONTAINER

	if [ ! -d "$LOGDIR" ] ; then
		sudo mkdir "$LOGDIR"
	fi

	for CONTAINER in $CONTAINERS ; do
		local DATE_CREATED
		local LOG_FILE

		DATE_CREATED=$(docker inspect -f "{{ .Created }}" "$CONTAINER")
		LOG_FILE=$(docker inspect -f "{{ .LogPath }}" "$CONTAINER")
		local OUT_FILE="$LOGDIR/$CONTAINER-$DATE_CREATED.log"
		sudo cp "$LOG_FILE" "$OUT_FILE"
		sudo chgrp docker "$OUT_FILE"
		sudo gzip -f "$OUT_FILE" &
	done
}

help() {
	echo "Command line options:"
	echo
	echo "--help      Show help"
	echo "--tag TAG   Specifiy tag for actions that require a tag"
	echo "--file NAME Specify a filename for actions that require it"
	echo
	echo "Actions:"
	echo
	echo "pull        Pull containers for a given tag (requires tag)"
	echo "migrate     Run database migrations (requires tag)"
	echo "scale       Scale services (cluster only)"
	echo "setup       Configure and run Teamwire containers (requires tag)"
	echo "start       Start all stopped Teamwire containers"
	echo "status      Show status of Teamwire containers"
	echo "stop        Stop all running Teamwire containers"
	echo "rm          Remove all stopped Teamwire containers"
	echo "backupdb    Create a backup of the database (requires file name)"
}

backupdb_single() {
	if [ -f "$FILENAME" ] ; then
		echo "$FILENAME exists, please specify a name that doesn't exists!"
		exit 1
	fi

	get_database_configuration
	write_temporary_database_access_config

	mysqldump --defaults-file="${MYSQL_CONFIG_FILE}" \
		-h "$MYSQL_HOST" -P "$MYSQL_PORT" \
		-u teamwire teamwire > "$FILENAME"
}

backupdb_cluster() {
	echo "Database backup is not supported on clustered setups!"
	echo "Please use the tool appropriate for your database to perform a manual backup."
	exit 1
}

pull_images_base() {
	echo "Pulling Teamwire container images for version $TAG"
	echo
	for IMAGE in $IMAGES; do
		docker pull "$IMAGE":"$TAG"
	done
}

pull_images_single() {
	pull_images_base
}

pull_images_cluster() {
	pull_images_base

	. "${CLUSTER_CONFIG_DIR}/cluster.conf"
	if [ -n "$REGISTRY" ] && [ -x /usr/local/bin/twimg ] ; then
		echo
		echo "Pushing images to registry"
		/usr/local/bin/twimg --registry "$REGISTRY" push
	fi
}

remove_containers_single() {
	# Save the logs of the containers before deleting them
	save_container_logs

	for CONTAINER in $CONTAINERS; do
		docker rm "$CONTAINER"
	done
}

remove_containers_cluster() {
	$DOCKER_COMPOSE rm
}

run_migrations_base() {
	check_tag "$TAG"
	get_database_configuration

	ERROR_LOG="$(tempfile)"

	echo "Running database migrations"
	echo
	docker run --rm -e MODE=migration --name teamwire-migrations \
		-e MYSQL_HOST="$MYSQL_HOST" -e MYSQL_PORT="$MYSQL_PORT" -e MYSQL_PASSWORD="$MYSQL_PASS" \
		-e ORA_HOST="$ORA_HOST" -e ORA_PORT="$ORA_PORT" -e ORA_DATABASE="$ORA_DATABASE" \
		-e ORA_USER="$ORA_USER" -e ORA_PASSWORD="$ORA_PASSWORD" \
		-e AESKEY="$AESKEY" teamwire/backend:"$TAG" 2> "$ERROR_LOG" | egrep -v '^(.+)='

	if [ $? -gt 0 ] ; then
		cat "$ERROR_LOG"
	fi
	rm -f "$ERROR_LOG"
}

run_migrations_single() {
	run_migrations_base
}

run_migrations_cluster() {
	run_migrations_base
}

scale_single() {
	echo "Service scaling is only supported on clustered setups."
	exit 1
}

scale_cluster() {
	$DOCKER_COMPOSE scale $OPTIONS
}

status_single() {
	docker ps
}

status_cluster() {
	$DOCKER_COMPOSE ps
}

stop_containers_single() {
	for CONTAINER in $CONTAINERS; do
		if docker ps -qf name="$CONTAINER" | egrep -q '^.+$' ; then
			docker stop "$CONTAINER"
		fi
	done
}

stop_containers_cluster() {
	$DOCKER_COMPOSE stop
}

start_containers_single() {
	for CONTAINER in $CONTAINERS; do
		docker start "$CONTAINER"
	done
}

start_containers_cluster() {
	$DOCKER_COMPOSE start
}

setup_containers_base() {
	check_tag "$TAG"
}

setup_containers_single() {
	setup_containers_base

	if [ -z "$(_get_config_value version)" ] ; then
		echo "ERROR: Please update the configuration file ${CONFIG_FILE}"
		echo "       from the provided example before using this action. "
		exit 1
	fi

	# Write given tag into config file
	sed -i -e 's/^\(version: \).*$/\1'"$TAG"'/' $CONFIG_FILE

	# Save the logs of the running containers
	save_container_logs

	ansible-playbook -i "${ANSIBLE_DIR}/hosts" "${ANSIBLE_DIR}/playbooks/roles/container.yml"
}

setup_containers_cluster() {
	setup_containers_base

	# Patch the compose file
	for IMAGE in $IMAGES ; do
		sed -i -e 's|\('"$IMAGE"':\)[[:alnum:]-]*|\1'"$TAG"'|' "$COMPOSE_FILE"
	done
	sed -i -e 's|\(VERSION=\)[[:alnum:]-]*|\1'"$TAG"'|' "$COMPOSE_FILE"

	$DOCKER_COMPOSE up -d
}

OPTIONS=""
TAG=""
TASK=""
while [ $# -gt 0 ] ; do
	case "$1" in
		-h|--help)
			help
			exit
			;;
		-t|--tag)
			TAG=$2
			shift
			;;
		-f|--file)
			FILENAME=$2
			shift
			;;
		pull)
			TASK="pull_images"
			TAG_REQUIRED=yes
			;;
		migrate)
			TASK="run_migrations"
			TAG_REQUIRED=yes
			;;
		scale)
			TASK="scale"
			shift
			OPTIONS=$@
			;;
		setup)
			TASK="setup_containers"
			TAG_REQUIRED=yes
			;;
		start)
			TASK="start_containers"
			;;
		status)
			TASK="status"
			;;
		stop)
			TASK="stop_containers"
			;;
		rm)
			TASK="remove_containers"
			;;
		backupdb)
			TASK="backupdb"
			FILENAME_REQUIRED=yes
			;;
		exportlogs)
			TASK="save_container_logs"
	esac
	shift
done

if [ -z "$TASK" ] ; then
	echo "ERROR: Mission action"
	echo
	help
	exit 1
fi

if [ "$TAG_REQUIRED" = "yes" ] && [ -z "$TAG" ] ; then
	echo "ERROR: Please specify a release tag!"
	echo
	help
	exit 1
fi

if [ "$FILENAME_REQUIRED" = "yes" ] && [ -z "$FILENAME" ] ; then
	echo "ERROR: Please specify a file name!"
	echo
	help
	exit 1
fi

"${TASK}_${INSTALLATION}"
