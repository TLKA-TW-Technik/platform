#!/bin/bash

# Emsure we can parse all command output
export LANG=C

# Find Ansible configuration
if [ -d ~/platform/ansible ] ; then
	ANSIBLE_DIR=~/platform/ansible
elif [ -d ~teamwire/platform/ansible ] ; then
	ANSIBLE_DIR=~teamwire/platform/ansible
else
	echo "Cannot find platform directory."
	exit 1
fi

CONFIG_FILE="${ANSIBLE_DIR}/group_vars/all"
CLUSTER_CONFIG_DIR=/data/cluster_config


get_vault_secret_recursive() {
        vault_list="vault list -format "yaml" secret"
        declare -a vault_secr=`eval "$vault_list | sed 's/-//g'"`
        for toplevel in ${vault_secr[@]}
        do
                sublevel=`eval "$vault_list/$toplevel | sed ':a;N;$!ba;s/\n//g'"`
                key=`echo $sublevel | sed 's|-\s|  |gm'`
                for k in ${key[@]}
                do
                        echo "$toplevel$k"
                done
        done
}

function vault_seal {
	if [[ $VAULT_SEALED == "false" ]];then
		vault operator seal
	else
		echo "Vault is already sealed"
	fi
}
function vault_unseal {
	vault status > /dev/null
	isSealed=$?
	if [ $isSealed -eq 0 ];then
		echo "Vault is already unsealed"
	else
		vault operator unseal
	fi
}


_get_config_value() {
	local ENTRY="$1"
	awk '/^'${ENTRY}':/ { gsub("(^\"|\"$)","", $2); print $2 }' "$CONFIG_FILE" 2> /dev/null
}

if [ -d "$CLUSTER_CONFIG_DIR" ] ; then
	# Clustered setup
	INSTALLATION=cluster
	VAULT_ADDR="https://vault.service.consul:8200"

	if [ "$UID" != "0" ] && [ ! -r "$CLUSTER_CONFIG_DIR" ] ; then
		# Try to grant read permissions to the required files
		sudo chgrp -R teamwire "$CLUSTER_CONFIG_DIR"
	fi

	NOMAD_JOB="${CLUSTER_CONFIG_DIR}/teamwire.nomad"
	NOMAD="/usr/local/bin/nomad"
else
	# Single server installation
	INSTALLATION=single
	VAULT_ADDR="https://127.0.0.1:8200"

	if [ ! -f "$CONFIG_FILE" ]; then
		echo "ERROR: Missing configuration file ${CONFIG_FILE}!"
		echo "       Please configure the server before using this tool."
		exit 1
	fi

	CONTAINERS="teamwire_screenshot_server teamwire_notification_server teamwire_beat teamwire_worker teamwire_backend"
fi

IMAGES="teamwire/backend teamwire/web-screenshot-server teamwire/notification-server"

VAULT_INITIALIZED=$(curl -s o /dev/null "${VAULT_ADDR}/v1/sys/health" | jq '.initialized')
VAULT_SEALED=$(curl -s o /dev/null "${VAULT_ADDR}/v1/sys/health" | jq '.sealed')

if [ "$VAULT_INITIALIZED" == "true" ] && [ "$VAULT_SEALED" != "false" ] && [[ $2 -ne "unseal" || $2 -ne "rescue" ]]; then
	echo "Vault must be unsealed. Please run twctl secrets unseal."
	exit 1
fi

check_tag() {
	local TAG=$1
	for IMAGE in $IMAGES ; do
		if ! docker images "$IMAGE" | grep -q "$TAG" ; then
			# Required image not found for given tag
			echo "ERROR: Containers for the requested tag could not be found."
			echo "       Please pull the containers first using the pull action."
			exit 1
		fi
	done
}

get_database_configuration() {
	if [ "$INSTALLATION" == "cluster" ] ; then
		. "${CLUSTER_CONFIG_DIR}/cluster.conf"
		if [ "$VAULT_INITIALIZED" == "true" ]; then
			AESKEY="$(vault read -field=value secret/database/aes_key)"

			if [ -n "$MYSQL_HOST" ]; then
				MYSQL_PASS="$(vault read -field=value secret/database/password)"
			fi

			if [ -n "$ORA_HOST" ]; then
				ORA_PASSWORD="$(vault read -field=value secret/database/password)"
			fi
		fi
		return
	fi

	MYSQL_HOST="$(_get_config_value mysql_host)"
	MYSQL_PORT="$(_get_config_value mysql_port)"
	MYSQL_DATABASE="$(_get_config_value teamwire_db_name)"
	MYSQL_USER="$(_get_config_value teamwire_db_user)"

if [ "$VAULT_INITIALIZED" == "true" ]; then
	MYSQL_PASS="$(vault read -field=value secret/database/password)"
	AESKEY="$(vault read -field=value secret/database/aes_key)"
else
	MYSQL_PASS="$(_get_config_value teamwire_db_password)"
	AESKEY="$(_get_config_value aes_key)"
fi

	if [ -z "$MYSQL_HOST" ]; then
		MYSQL_HOST=127.0.0.1
	fi

	if [ -z "$MYSQL_PORT" ]; then
		MYSQL_PORT=3306
	fi

	if [ -z "$MYSQL_DATABASE" ]; then
		MYSQL_DATABASE=teamwire
	fi

	if [ -z "$MYSQL_USER" ]; then
		MYSQL_USER=teamwire
	fi

	if [ -z "$MYSQL_PASS" ] || [ -z "$AESKEY" ] ; then
		echo "ERROR: Cannot read required parameters from $CONFIG_FILE."
		echo "       Please ensure the file exists and the database is configured."
		exit 1
	fi
}


# Temporary user credentials storage for functions accessing MySQL
MYSQL_CONFIG_FILE=""

write_temporary_database_access_config() {
	if [ -z "$MYSQL_CONFIG_FILE" ] ; then
		get_database_configuration

		MYSQL_CONFIG_FILE=$(mktemp ~/.twctl_XXXXXXXXXXXX)
		chmod 0600 "$MYSQL_CONFIG_FILE"

		local SECTION=$1
		echo -e "[${SECTION:-mysqldump}]\nuser=$MYSQL_USER\npassword=$MYSQL_PASS" > "$MYSQL_CONFIG_FILE"
		trap "rm -f ${MYSQL_CONFIG_FILE}" exit
	fi
}

save_container_logs() {
	local LOGDIR=/var/log/teamwire
	local CONTAINER

	for CONTAINER in $CONTAINERS ; do
		local DATE_CREATED
		local LOG_FILE

		if [ "$(docker inspect -f '{{.HostConfig.LogConfig.Type}}' ${CONTAINER} 2> /dev/null)" != "json-file" ] ; then
			continue
		fi

		if [ ! -d "$LOGDIR" ] ; then
			sudo mkdir "$LOGDIR"
		fi

		DATE_CREATED=$(docker inspect -f "{{ .Created }}" "$CONTAINER")
		LOG_FILE=$(docker inspect -f "{{ .LogPath }}" "$CONTAINER")
		local OUT_FILE="$LOGDIR/$CONTAINER-$DATE_CREATED.log"
		sudo cp "$LOG_FILE" "$OUT_FILE"
		sudo chgrp docker "$OUT_FILE"
		sudo gzip -f "$OUT_FILE" &
	done
}

secrets() {
case $OPTION in
		read)
				vault read -field=value "secret/${SECRET}"
				;;
		write)
				if [ -z "$SECRET" ] ; then
				 echo "ERROR: A secret must be specified, use 'twctl secrets list' for information on current secret paths."
				 echo
				 exit 1
				fi

				echo Setting "${SECRET}"
				read -s -p "Secret: " ENTRY; echo
				read -s -p "Confirm Secret: " ENTRYCONFIRM; echo

				if [[ "${ENTRY}" != "${ENTRYCONFIRM}" ]]; then
				 echo "Entries do not match, exiting"
				 exit -1
				else
				 vault write "secret/${SECRET}" "value=${ENTRY}"
				fi
				;;
		list)
				get_vault_secret_recursive
				;;
		delete)
				vault delete "secret/${SECRET}"
				;;
		unseal)
				vault_unseal
				;;
		seal)
				vault_seal
				;;
		rescue)
				vault operator unseal -address=https://127.0.0.1:8200
				;;
		info)
				vault status
				;;
		*)
				echo "Managing Vault secrets"
				echo "Usage: twctl secrets {read|write|list|delete|unseal|seal|rescue|info}"
				echo "	read  : Reads the specified secret"
				echo "	write : Updates the specified secret"
				echo "	list  : Lists the secret paths"
				echo "	delete : Deletes the specified secret"
				echo "	unseal : Unseals the Vault so secrets can be accessed"
				echo "	seal : Seals the Vault to prevent access to secrets"
				echo "	rescue : Re-register and unseal a Vault server if the consul cluster address no longer resolves"
				echo "	info : Displays Vault information such as seal status, cluster mode and version"    ;;
esac
}



help() {
	echo "Command line options:"
	echo
	echo "--help      Show help"
	echo "--tag TAG   Specifiy tag for actions that require a tag"
	echo "--file NAME Specify a filename for actions that require it"
	echo
	echo "Actions:"
	echo
	echo "pull        Pull containers for a given tag (requires tag)"
	echo "migrate     Run database migrations (requires tag)"
	echo "setup       Configure and run Teamwire containers (requires tag)"
	echo "start       Start all stopped Teamwire containers"
	echo "status      Show status of Teamwire containers"
	echo "stop        Stop all running Teamwire containers"
	echo "rm          Remove all stopped Teamwire containers"
	echo "backupdb    Create a backup of the database (requires file name)"
	echo "secrets     Manage Vault and its secrets"
}

backupdb_single() {
	if [ -f "$FILENAME" ] ; then
		echo "$FILENAME exists, please specify a name that doesn't exists!"
		exit 1
	fi

	write_temporary_database_access_config

	mysqldump --defaults-file="${MYSQL_CONFIG_FILE}" \
		--single-transaction \
		-h "$MYSQL_HOST" -P "$MYSQL_PORT" \
		-u "$MYSQL_USER" "$MYSQL_DATABASE" > "$FILENAME"
}

backupdb_cluster() {
	echo "Database backup is not supported on clustered setups!"
	echo "Please use the tool appropriate for your database to perform a manual backup."
	exit 1
}

pull_images_base() {
	echo "Pulling Teamwire container images for version $TAG"
	echo
	for IMAGE in $IMAGES; do
		docker pull "$IMAGE":"$TAG"
	done
}

pull_images_single() {
	pull_images_base
}

pull_images_cluster() {
	pull_images_base

	. "${CLUSTER_CONFIG_DIR}/cluster.conf"
	if [ -n "$REGISTRY" ] && [ -x /usr/local/bin/twimg ] ; then
		echo
		echo "Pushing images to registry"
		/usr/local/bin/twimg --registry "$REGISTRY" push
	fi
}

remove_containers_single() {
	# Save the logs of the containers before deleting them
	save_container_logs

	for CONTAINER in $CONTAINERS; do
		docker rm "$CONTAINER"
	done
}

remove_containers_cluster() {
	echo "On clustered setups containers are deleted when stopped."
	exit 1
}

run_migrations_base() {
	check_tag "$TAG"
	get_database_configuration

	ERROR_LOG="$(mktemp)"

	echo "Running database migrations"
	echo
	docker run --rm --network host -e MODE=migration --name teamwire-migrations \
		-e MYSQL_HOST="$MYSQL_HOST" -e MYSQL_PORT="$MYSQL_PORT" -e MYSQL_DATABASE="$MYSQL_DATABASE" \
		-e MYSQL_USER="$MYSQL_USER" -e MYSQL_PASSWORD="$MYSQL_PASS" \
		-e ORA_HOST="$ORA_HOST" -e ORA_PORT="$ORA_PORT" -e ORA_DATABASE="$ORA_DATABASE" \
		-e ORA_USER="$ORA_USER" -e ORA_PASSWORD="$ORA_PASSWORD" \
		-e AESKEY="$AESKEY" teamwire/backend:"$TAG" 2> "$ERROR_LOG" | egrep -v '^(.+)='

	if [ $? -gt 0 ] ; then
		cat "$ERROR_LOG"
	fi
	rm -f "$ERROR_LOG"
}

run_migrations_single() {
	run_migrations_base
}

run_migrations_cluster() {
	run_migrations_base
}

status_single() {
	docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}"
}

status_cluster() {
	$NOMAD status teamwire
}

stop_containers_single() {
	for CONTAINER in $CONTAINERS; do
		if docker ps -qf name="$CONTAINER" | grep -Eq '^.+$' ; then
			docker stop "$CONTAINER"
		fi
	done
}

stop_containers_cluster() {
	$NOMAD stop teamwire
}

start_containers_single() {
	for CONTAINER in $CONTAINERS; do
		docker start "$CONTAINER"
	done
}

start_containers_cluster() {
	$NOMAD run "$NOMAD_JOB"
}

setup_containers_base() {
	check_tag "$TAG"

	if [ -z "$(_get_config_value version)" ] ; then
		echo "ERROR: Please update the configuration file ${CONFIG_FILE}"
		echo "       from the provided example before using this action. "
		exit 1
	fi

	# Write given tag into config file
	sed -i -e 's/^\(version: \).*$/\1'"$TAG"'/' $CONFIG_FILE
}

setup_containers_single() {
	setup_containers_base

	# Save the logs of the running containers
	save_container_logs

	ansible-playbook -i "${ANSIBLE_DIR}/hosts" "${ANSIBLE_DIR}/playbooks/roles/container.yml"
}

setup_containers_cluster() {
	setup_containers_base

	ansible-playbook -i "${ANSIBLE_DIR}/cluster_hosts" "${ANSIBLE_DIR}/playbooks/roles/container.yml"
	$NOMAD run "$NOMAD_JOB"
}

TAG=""
TASK=""
while [ $# -gt 0 ] ; do
	case "$1" in
		-h|--help)
			help
			exit
			;;
		-t|--tag)
			TAG=$2
			shift
			;;
		-f|--file)
			FILENAME=$2
			shift
			;;
		pull)
			TASK="pull_images"
			TAG_REQUIRED=yes
			;;
		migrate)
			TASK="run_migrations"
			TAG_REQUIRED=yes
			;;
		setup)
			TASK="setup_containers"
			TAG_REQUIRED=yes
			;;
		start)
			TASK="start_containers"
			;;
		status)
			TASK="status"
			;;
		stop)
			TASK="stop_containers"
			;;
		rm)
			TASK="remove_containers"
			;;
		backupdb)
			TASK="backupdb"
			FILENAME_REQUIRED=yes
			;;
		exportlogs)
			TASK="save_container_logs"
			;;
		secrets)
			OPTION="$2"
			SECRET="$3"
			TASK="secrets"
			;;
	esac
	shift
done

if [ -z "$TASK" ] ; then
	echo "ERROR: Mission action"
	echo
	help
	exit 1
fi

if [ "$TAG_REQUIRED" = "yes" ] && [ -z "$TAG" ] ; then
	echo "ERROR: Please specify a release tag!"
	echo
	help
	exit 1
fi

if [ "$FILENAME_REQUIRED" = "yes" ] && [ -z "$FILENAME" ] ; then
	echo "ERROR: Please specify a file name!"
	echo
	help
	exit 1
fi

if type -t "$TASK" | grep -q "function$" ; then
	"$TASK"
else
	"${TASK}_${INSTALLATION}"
fi
